@using Microsoft.JSInterop;
@using HotfixMods.Infrastructure.Services

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject ItemService ItemService


<MudDialog>
    <DialogContent>
        <MudStack>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CopyToClipboardAsync_Click">Copy Id</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RefreshAsync_Click">Refresh Id</MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public Type TDto { get; set; }

    [Parameter]
    public bool TDtoIsUpdate { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (!TDtoIsUpdate)
        {
            await CopyToClipboardAsync();
        }
    }


    async Task CopyToClipboardAsync_Click()
    {
        await CopyToClipboardAsync();
    }

    async Task RefreshAsync_Click()
    {
        var newId = await ItemService.GetNextIdAsync();
        Snackbar.Add($"Id set to {newId}", Severity.Info, config => { config.Icon = Icons.Filled.Check; });
        MudDialog.Close(newId);
    }

    async Task CopyToClipboardAsync()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Id);
        Snackbar.Add($"{Id} copied to clipboard", Severity.Info, config => { config.Icon = Icons.Filled.Check; });
        MudDialog.Close(-1);
    }
}