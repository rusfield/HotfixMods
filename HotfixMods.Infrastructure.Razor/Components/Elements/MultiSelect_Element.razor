@typeparam T where T : struct, Enum

@using HotfixMods.Infrastructure.Extensions

<MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Filled.ArrowBack" Color="@Color.Info" OnClick="@(() => SetValueAsync(((T)Value).ToValues()))" Visible="@(GetBadgeVisibility())" Style="width:100%" Class="@(CssClass + " cursor-pointer")">
    <MudSelect T="T" SelectedValuesChanged="SetValueAsync" SelectedValues="@selectedValues" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetSelectionText))" Label="@Label" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" MultiSelection="true" Class="@CssClass">
        @foreach (var item in options)
        {
            <MudSelectItem T="T" Value="@item.Key">@item.Value</MudSelectItem>
        }
    </MudSelect>
</MudBadge>

@code
{
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public T? Value { get; set; } // Flag value

    [Parameter]
    public T? ValueLookup { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    Dictionary<T, string> options;
    IEnumerable<T> selectedValues;

    protected override void OnInitialized()
    {
        options = Enum.GetValues<T>().ToDictionary(e => e, v => v.ToDisplayString());

        if (Value != null)
            selectedValues = ((T)Value).ToValues();

        base.OnInitialized();
    }



    async Task SetValueAsync(IEnumerable<T> newValues)
    {
        selectedValues = newValues;
        Value = selectedValues.ToMask();
        await ValueChanged.InvokeAsync(Value);
    }

    string SetSelectionText(IEnumerable<string> selection)
    {
        return string.Join(", ", selection);
    }

    bool GetBadgeVisibility()
    {
        return Value != null && ValueLookup != null && (long)(object)Value.Value != (long)(object)ValueLookup.Value;
    }
}