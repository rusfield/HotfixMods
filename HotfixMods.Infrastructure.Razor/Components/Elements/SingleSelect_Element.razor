@typeparam T 

@using HotfixMods.Infrastructure.Extensions

<MudSelect Variant="@Variant" T="T" Value="Value" Label="@Label" ValueChanged="SetValueAsync" Class="@CssClass">
    @foreach (var option in options)
    {
        <MudSelectItem T="T" Value="@option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@code 
{
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public T? ValueLookup { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    async Task SetValueAsync(T newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(Value);
    }

    Dictionary<T, string> options;
    protected override void OnInitialized()
    {
        var values = Enum.GetValues(Nullable.GetUnderlyingType(typeof(T)));
        options = ((T[])values).ToDictionary(e => e, v => v.ToDisplayString());
        base.OnInitialized();
    }
}