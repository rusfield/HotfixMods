@using HotfixMods.Infrastructure.Extensions

<MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Filled.ArrowBack" Color="@Color.Info" OnClick="@(() => SetValueAsync(ValueLookup))" Visible="@(GetBadgeVisibility())" Style="width:100%" Class="@(CssClass + " cursor-pointer")">
    <MudSelect Variant="@Variant" T="bool?" Value="Value" Label="@Label" ValueChanged="SetValueAsync" Class="@CssClass">
        @foreach (var option in options)
        {
            <MudSelectItem T="bool?" Value="@option.Key">@option.Value</MudSelectItem>
        }
    </MudSelect>
</MudBadge>

@code
{
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool? Value { get; set; }

    [Parameter]
    public bool? ValueLookup { get; set; }

    [Parameter]
    public EventCallback<bool?> ValueChanged { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    async Task SetValueAsync(bool? newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(Value);
    }

    Dictionary<bool?, string> options;
    protected override void OnInitialized()
    {
        options = new();
        options.Add(true, "True");
        options.Add(false, "False");

        base.OnInitialized();
    }

    bool GetBadgeVisibility()
    {
        if (Value != null && ValueLookup != null)
        {
            return Value != ValueLookup;
        }
        return false;
    }
}