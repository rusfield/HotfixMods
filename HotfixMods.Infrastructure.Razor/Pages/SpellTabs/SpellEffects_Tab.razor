@using HotfixMods.Core.Flags
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.DtoModels.Spells
@using HotfixMods.Infrastructure.Razor.Components.Elements

<MudGrid>
    <MudItem xs="4" Class="@gridItemCssClass">
        <SingleSelect_Element T="int" Label="Effect Index" Value="SpellEffect.EffectIndex" ValueChanged="ValueChanged" Options="Spell.SpellEffects.ToDictionary(s => s.EffectIndex, k => k.EffectIndex.ToString())" CssClass="@elementCssClass" />
        <SingleSelect_Element Label="Effect" @bind-Value="SpellEffect.Effect" ValueLookup="SpellEffectLookup?.Effect" CssClass="@elementCssClass" />
        <SingleSelect_Element Label="Effect Aura" @bind-Value="SpellEffect.EffectAura" ValueLookup="SpellEffectLookup?.EffectAura" CssClass="@elementCssClass" />
        <MultiSelect_Element T="@SpellEffectAttributeFlags" Label="Attributes" @bind-Value="SpellEffect.EffectAttributes" ValueLookup="SpellEffectLookup?.EffectAttributes" CssClass="@elementCssClass" />
    </MudItem>
    <MudItem xs="4" Class="@gridItemCssClass">
        @* BG *@
    </MudItem>
    <MudItem xs="4" Class="@gridItemCssClass">
        <DecimalInput_Element Label="Effect Value" @bind-Value="SpellEffect.EffectBasePointsF" ValueLookup="SpellEffectLookup?.EffectBasePointsF" CssClass="@elementCssClass" />
        <IntInput_Element Label="Aura Tick Time (ms)" @bind-Value="SpellEffect.EffectAuraPeriod" ValueLookup="SpellEffectLookup?.EffectAuraPeriod" CssClass="@elementCssClass" />
        <SingleSelect_Element Label="Implicit Taret 0" @bind-Value="SpellEffect.ImplicitTarget0" ValueLookup="SpellEffectLookup?.ImplicitTarget0" CssClass="@elementCssClass" />
        <SingleSelect_Element Label="Implicit Taret 1" @bind-Value="SpellEffect.ImplicitTarget1" ValueLookup="SpellEffectLookup?.ImplicitTarget1" CssClass="@elementCssClass" />
    </MudItem>
</MudGrid>



@code
{
    [Parameter]
    public SpellEffectDto SpellEffect { get; set; }

    [Parameter]
    public SpellEffectDto? SpellEffectLookup { get; set; }

    [Parameter]
    public SpellDto Spell { get; set; }

    [Parameter]
    public EventCallback<int> EffectChanged { get; set; }



    async Task ValueChanged(int newValue)
    {
        if (SpellEffect.EffectIndex != newValue)
        {
            Spell.SpellEffects.RemoveAt(SpellEffect.EffectIndex);
            Spell.SpellEffects.Insert(newValue, SpellEffect);
            for (int i = 0; i < Spell.SpellEffects.Count; i++)
            {
                Spell.SpellEffects[i].EffectIndex = i;
            }
            this.StateHasChanged();
            await EffectChanged.InvokeAsync(newValue);
        }
    }

    string elementCssClass = "pb-2 pt-2";
    string gridItemCssClass = "pb-0 pt-0";
}
