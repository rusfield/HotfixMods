@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.DtoModels.Creatures
@using HotfixMods.Infrastructure.Razor.Components.Elements

<MudGrid>
    <MudItem xs="3" Class="@gridItemCssClass">
        @for (int i = 0; i < Math.Min(6, AvailableCustomizations.Count); i++)
        {
            int iNested = i;
            int customizationOption = AvailableCustomizations.ElementAt(iNested).Key.Id;

            <SingleSelect_Element T="int?" Label="@(AvailableCustomizations.ElementAt(iNested).Key.Name)" Options="@(AvailableCustomizations.ElementAt(iNested).Value.ToDictionary(e => (int?)e.Id, v => v.Name))" @bind-Value="(Creature.Customizations[customizationOption])" ValueLookup="@(CreatureAndCreatureLookupShareCustomizations() ? CreatureLookup?.Customizations[customizationOption] : null)" CssClass="@elementCssClass" />
        }
    </MudItem>
    <MudItem xs="6" Class="@gridItemCssClass">
        @* BG *@
    </MudItem>
    <MudItem xs="3" Class="@gridItemCssClass">
        @for (int i = 6; i < Math.Min(12, AvailableCustomizations.Count - 1); i++)
        {
            int iNested = i;
            int customizationOption = AvailableCustomizations.ElementAt(iNested).Key.Id;

            <SingleSelect_Element T="int?" Label="@(AvailableCustomizations.ElementAt(iNested).Key.Name)" Options="@(AvailableCustomizations.ElementAt(iNested).Value.ToDictionary(e => (int?)e.Id, v => v.Name))" @bind-Value="(Creature.Customizations[customizationOption])" ValueLookup="@(CreatureAndCreatureLookupShareCustomizations() ? CreatureLookup?.Customizations[customizationOption] : null)" CssClass="@elementCssClass" />
        }
    </MudItem>

    @if (AvailableCustomizations.Count > 12)
    {
        foreach (var (remainingOption, iNested) in AvailableCustomizations.Skip(12).Select((v, i) => (v, i + 12)))
        {
            int customizationOption = AvailableCustomizations.ElementAt(iNested).Key.Id;

            <MudItem xs="3" Class="@gridItemCssClass">
                <SingleSelect_Element T="int?" Label="@(AvailableCustomizations.ElementAt(iNested).Key.Name)" Options="@(AvailableCustomizations.ElementAt(iNested).Value.ToDictionary(e => (int?)e.Id, v => v.Name))" @bind-Value="(Creature.Customizations[customizationOption])" ValueLookup="@(CreatureAndCreatureLookupShareCustomizations() ? CreatureLookup?.Customizations[customizationOption] : null)" CssClass="@elementCssClass" />
            </MudItem>
        }
    }
</MudGrid>



@code
{
    [Parameter]
    public CreatureDto Creature { get; set; }

    [Parameter]
    public CreatureDto? CreatureLookup { get; set; }

    [Parameter]
    public Dictionary<CustomizationOptionDto, List<CustomizationChoiceDto>> AvailableCustomizations { get; set; }

    bool CreatureAndCreatureLookupShareCustomizations()
    {
        if(Creature != null && Creature.Race != null && Creature.Gender != null)
        {
            if (CreatureLookup != null && CreatureLookup.Race != null && CreatureLookup.Gender != null)
            {
                if(Creature.Race == CreatureLookup.Race && Creature.Gender == CreatureLookup.Gender)
                {
                    return true;
                }
            }
        }
        return false;
    }

    string elementCssClass = "pb-2 pt-2";
    string gridItemCssClass = "pb-0 pt-0";
}
