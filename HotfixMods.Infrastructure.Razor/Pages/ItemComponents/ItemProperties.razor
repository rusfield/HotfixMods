@using HotfixMods.Core.Enums
@using HotfixMods.Infrastructure.DtoEnums
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.Extensions

<MudGrid>
    <MudItem xs="4">
        <MudStack>
            <MudNumericField Variant="Variant.Outlined" HideSpinButtons="true" Class="@cssClass" Label="Icon ID" @bind-Value="@Item.IconId" />
            <MudNumericField Variant="Variant.Outlined" HideSpinButtons="true" Class="@cssClass" Label="Item Slot" @bind-Value="_test" />
            <MudNumericField Variant="Variant.Outlined" HideSpinButtons="true" Class="@cssClass" Label="Upper Chest" @bind-Value="_test" />
            <MudStack Row="true">
                <MudSelect Variant="Variant.Outlined" T="string" Label="Type" ValueChanged="OnItemTypeChange">
                    <MudSelectItem Value="@("ARMOR")">Armor</MudSelectItem>
                    <MudSelectItem Value="@("WEAPON")">Weapon</MudSelectItem>
                </MudSelect>
                <MudSelect Variant="Variant.Outlined" T="ItemTypeDtoEnum?" @bind-Value="Item.ItemType" Label="Subtype">
                    @foreach (var subType in availableItemSubTypes)
                    {
                        <MudSelectItem T="ItemTypeDtoEnum?" Value="@subType">@(subType.ToDisplayString().Replace("Armor ", "").Replace("Weapon ", ""))</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudStack>
    </MudItem>
    <MudItem xs="4" />
    <MudItem xs="4">
        <MudStack>
            <MudNumericField Variant="Variant.Outlined" HideSpinButtons="true" Class="@cssClass" Label="Required Level" @bind-Value="_test" />
            <MudNumericField Variant="Variant.Outlined" HideSpinButtons="true" Class="@cssClass" Label="Item Level" @bind-Value="_test" />

            <MudSelect Variant="Variant.Outlined" T="OverallQualities?" @bind-Value="Item.OverallQuality" Label="Quality">
                @foreach (var qualityEnum in Enum.GetValues<OverallQualities>())
                {
                    <MudSelectItem T="OverallQualities?" Value="@qualityEnum">@qualityEnum.ToDisplayString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Variant="Variant.Outlined" T="ItemBondings?" @bind-Value="Item.Bonding" Label="Bonding">
                @foreach (var bondingEnum in Enum.GetValues<ItemBondings>())
                {
                    <MudSelectItem T="ItemBondings?" Value="@bondingEnum">@bondingEnum.ToDisplayString()</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudItem>
    <MudItem xs="3" />
    <MudItem xs="6">
        <MudTextField @bind-Value="@Item.Name" Label="Name" />
    </MudItem>
    <MudItem xs="3" />
    <MudItem xs="4" />
    <MudItem xs="4">
        <MudTextField @bind-Value="@Item.Description" Label="Description" />
    </MudItem>
    <MudItem xs="4" />

</MudGrid>


@code {
    [Parameter]
    public ItemDto? Item { get; set; }

    int? _test;
    List<ItemTypeDtoEnum> availableItemSubTypes = new List<ItemTypeDtoEnum>();

    void OnItemTypeChange(string selection)
    {
        availableItemSubTypes = new List<ItemTypeDtoEnum>();
        foreach (var enumValue in Enum.GetValues<ItemTypeDtoEnum>())
        {
            if (enumValue.ToString().StartsWith(selection))
                availableItemSubTypes.Add(enumValue);
        }
    }



    string cssClass = "pb-2 pt-2";
}