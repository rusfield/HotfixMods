@page "/item"
@using HotfixMods.Infrastructure.Razor.Pages.ItemComponents
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.Razor.Components.Dialogs

@inject IDialogService DialogService



<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
    <MudStack Row="true">
        <MudButton Variant="Variant.Outlined" Color="Color.Info">Item Lookup</MudButton>
    </MudStack>
    <MudStack Row="true">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="IdAsync_Click">@item.Id</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">@(item.IsUpdate ? "Update" : "Save")</MudButton>
        </MudStack>
    </MudStack>
    <MudPaper>
        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <MudTabPanel Text="Properties">
                <ItemProperties Item="item" />
            </MudTabPanel>
            <MudTabPanel Text="Textures">
                <ItemTextures Item="item" />
            </MudTabPanel>
            <MudTabPanel Text="Geosets">
                <ItemGeosets Item="item" />
            </MudTabPanel>
        </MudTabs>
    </MudPaper>


    @code
    {
    ItemDto item = new ItemDto()
        {
            Id = 123,
            IsUpdate = true
        };


    async Task SaveAsync_Click()
    {

    }

    async Task IdAsync_Click()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, NoHeader = true };
        var parameters = new DialogParameters();
        parameters.Add("Id", item.Id);
        parameters.Add("TDto", typeof(ItemDto));
        parameters.Add("TDtoIsUpdate", item.IsUpdate);
        var dialog = DialogService.Show<IdButton_Dialog>(null, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (int)result.Data != -1)
        {
            item.Id = (int)result.Data;
            item.IsUpdate = false;
        }
    }

    
}

