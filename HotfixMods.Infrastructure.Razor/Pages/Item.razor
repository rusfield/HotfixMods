@page "/item"
@using HotfixMods.Infrastructure.DashboardModels
@using HotfixMods.Infrastructure.Razor.Components
@using HotfixMods.Infrastructure.Razor.Pages.ItemComponents
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.Razor.Components.Dialogs
@using HotfixMods.Infrastructure.Services
@using Core.Enums

@inject IDialogService DialogService
@inject ItemService ItemService


@if (item != null)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="LookupAsync_Click">Item Lookup</MudButton>
        </MudStack>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="IdAsync_Click">@item.Id</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">@(item.IsUpdate ? "Update" : "Save")</MudButton>
            </MudStack>
        </MudStack>
    <MudPaper>

        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <MudTabPanel Text="Properties">
                <ItemProperties Item="item" ItemLookup="itemLookup" />
            </MudTabPanel>
            <MudTabPanel Text="Textures">
                <ItemTextures Item="item" ItemLookup="itemLookup" />
            </MudTabPanel>
            <MudTabPanel Text="Geosets">
                <ItemGeosets Item="item" ItemLookup="itemLookup" />
            </MudTabPanel>
        </MudTabs>

    </MudPaper>
}
else
{
    <DashboardTable T="ItemDashboard" Data="@(new List<ItemDashboard>())" Add="AddAsync_Click" />
}

@code
{
    ItemDto? item;

    ItemDto? itemLookup;

    async void AddAsync_Click()
    {
        item = await OpenItemSearchDialog();
        this.StateHasChanged();
    }

    async Task LookupAsync_Click()
    {
        itemLookup = await OpenItemSearchDialog();
        this.StateHasChanged();
    }

    async Task SaveAsync_Click()
    {
        await ItemService.SaveItemAsync(item);
        item.IsUpdate = true;
    }

    async Task IdAsync_Click()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, NoHeader = true };
        var parameters = new DialogParameters();
        parameters.Add("Id", item.Id);
        parameters.Add("TDto", typeof(ItemDto));
        parameters.Add("TDtoIsUpdate", item.IsUpdate);
        var dialog = DialogService.Show<IdButton_Dialog>(null, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (int)result.Data != -1)
        {
            item.Id = (int)result.Data;
            item.IsUpdate = false;
        }
    }

    async Task<ItemDto?> OpenItemSearchDialog()
    {
        var dialogParameters = new DialogParameters();
        var dialog = DialogService.Show<ItemSearch_Dialog>(null, dialogParameters);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Cancelled)
        {
            var result = (ItemDto)dialogResult.Data;
            if (null != result)
            {
                return (ItemDto)dialogResult.Data;
            }
        }
        return null;
    }
}

