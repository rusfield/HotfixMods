@page "/creatures"
@using HotfixMods.Infrastructure.DtoModels.Creatures
@using HotfixMods.Infrastructure.Razor.Components
@using HotfixMods.Infrastructure.Razor.Pages.CreatureTabs
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.Razor.Components.Dialogs
@using HotfixMods.Infrastructure.Razor.RazorDashboard
@using HotfixMods.Infrastructure.Services
@using Core.Enums

@inject IDialogService DialogService
@inject CreatureService CreatureService


@if (creature != null)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="CreatureLookupAsync_Click">Creature Lookup</MudButton>
        </MudStack>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="IdAsync_Click">@creature.Id</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">@(creature.IsUpdate ? "Update" : "Save")</MudButton>
            </MudStack>
        </MudStack>
    <MudPaper>

        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <MudTabPanel Text="Template">
                <CreatureTemplate_Tab Creature="creature" CreatureLookup="creatureLookup" />
            </MudTabPanel>
            <MudTabPanel Text="Customization">
                <CreatureCustomization_Tab Creature="creature" CreatureLookup="creatureLookup" AvailableCustomizations="availableCustomizations"/>
            </MudTabPanel>
            <MudTabPanel Text="Equipment">
                <CreatureEquipment_Tab Creature="creature" CreatureLookup="creatureLookup" />
            </MudTabPanel>
        </MudTabs>

    </MudPaper>
}
else
{
    <DashboardTable Data="@(creatureDashboard)" Add="AddAsync_Click" />
}

@code
{
    CreatureDto? creature;
    CreatureDto? creatureLookup;
    List<RazorDashboardModel> creatureDashboard;
    Dictionary<CustomizationOptionDto, List<CustomizationChoiceDto>> availableCustomizations;

    protected override async Task OnInitializedAsync()
    {
        creatureDashboard = new List<RazorDashboardModel>();
        var dashboardCreatures = await CreatureService.GetDashboardAsync();
        foreach (var dashboardCreature in dashboardCreatures)
        {
            creatureDashboard.Add(new RazorDashboardModel(
                dashboardCreature.Id,
                dashboardCreature.Name,
                dashboardCreature.AvatarUrl,
                dashboardCreature.Comment,
                (async () => await EditAsync(dashboardCreature.Id)),
                (async () => await CreatureService.DeleteAsync(dashboardCreature.Id))
            ));
        }
        await base.OnInitializedAsync();
    }

    async Task EditAsync(int id)
    {
        creature = await OpenCreatureSearchDialog(id);
        if (creature != null && creature.Race != null && creature.Gender != null) 
            availableCustomizations = await CreatureService.GetAvailableCustomizations((Races)creature.Race, (Genders)creature.Gender);
        this.StateHasChanged();
    }

    async void AddAsync_Click()
    {
        creature = await OpenCreatureSearchDialog();
        if (creature != null && creature.Race != null && creature.Gender != null)
            availableCustomizations = await CreatureService.GetAvailableCustomizations((Races)creature.Race, (Genders)creature.Gender);
        this.StateHasChanged();
    }

    async Task CreatureLookupAsync_Click()
    {
        creatureLookup = await OpenCreatureSearchDialog();
        this.StateHasChanged();
    }

    async Task SaveAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Prompt_Dialog.Prompt), Prompt_Dialog.PromptType.Save);
        parameters.Add(nameof(Prompt_Dialog.ActionAsync), (() => SaveAsync()));
        DialogService.Show<Prompt_Dialog>(null, parameters);

        creature.IsUpdate = true;
    }

    async void SaveAsync()
    {
        await CreatureService.SaveAsync(creature);
    }

    async Task IdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IdButton_Dialog.Id), creature.Id);
        parameters.Add(nameof(IdButton_Dialog.TDto), typeof(CreatureDto));
        parameters.Add(nameof(IdButton_Dialog.TDtoIsUpdate), creature.IsUpdate);
        var dialog = DialogService.Show<IdButton_Dialog>(null, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && (int)result.Data != -1)
        {
            creature.Id = (int)result.Data;
            creature.IsUpdate = false;
        }
    }

    async Task<CreatureDto?> OpenCreatureSearchDialog(int? id = null)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(CreatureSearch_Dialog.CreatureId), id);
        var dialog = DialogService.Show<CreatureSearch_Dialog>(null, dialogParameters);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Cancelled)
        {
            var result = (CreatureDto)dialogResult.Data;
            if (null != result)
            {
                return (CreatureDto)dialogResult.Data;
            }
        }
        return null;
    }
}

