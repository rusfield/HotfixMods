@page "/anim-kits"
@using HotfixMods.Infrastructure.Razor.Pages.AnimKitTabs
@using HotfixMods.Infrastructure.Razor.RazorDashboard
@using HotfixMods.Infrastructure.Razor.Components
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.DtoModels.AnimKits
@using HotfixMods.Infrastructure.Razor.Components.Dialogs
@using HotfixMods.Infrastructure.Services
@using Core.Enums

@inject IDialogService DialogService
@inject AnimKitService DtoService


@if (dto != null)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="LookupAsync_Click">Anim Kit Lookup</MudButton>
        </MudStack>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="IdAsync_Click">@dto.Id</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">@(dto.IsUpdate ? "Update" : "Save")</MudButton>
            </MudStack>
        </MudStack>
    <MudPaper>

        <MudTabs @ref="mudTabsRef" Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <ChildContent>
                <MudTabPanel Text="Properties">
                    <AnimKitProperties_Tab AnimKit="dto" AnimKitLookup="dtoLookup" />
                </MudTabPanel>
                @for (int i = 0; i < dto.Segments.Count; i++)
                {
                    int index = i;
                    <MudTabPanel Text="@($"Segment #{index}")">
                        <AnimKitSegment_Tab SegmentChanged="SegmentChanged" AnimKit="dto" AnimKitSegment="dto.Segments[index]" AnimKitSegmentLookup="@(dtoLookup != null && dtoLookup.Segments.Count >= index ? dtoLookup.Segments[index] : null)" />
                    </MudTabPanel>
                }
            </ChildContent>
            <Header>
                <MudTooltip Text="Add new segment">
                    <MudIconButton Icon="@Icons.Filled.Add" Style="color:white" OnClick="AddSegment_Click"/>
                </MudTooltip>
                <MudTooltip Text="Remove current segment">
                    <MudIconButton Icon="@Icons.Filled.Remove" Style="color:white" OnClick="RemoveSegment_Click" Disabled="@(!TabIsRemovable())"/>
                </MudTooltip>
            </Header>
        </MudTabs>
    </MudPaper>
}
else
{
    <DashboardTable Data="@(dashboard)" Add="AddAsync_Click" Label="Anim Kits" />
}


@code
{
    AnimKitDto? dto;
    AnimKitDto? dtoLookup;
    List<RazorDashboardModel> dashboard;
    MudTabs mudTabsRef;
    int numberOfStaticTabs;

    protected override async Task OnInitializedAsync()
    {
        dashboard = new();
        var dashboardResults = await DtoService.GetDashboardAsync();
        foreach (var dashboardResult in dashboardResults)
        {
            dashboard.Add(new RazorDashboardModel(
                dashboardResult.Id,
                dashboardResult.Name,
                dashboardResult.AvatarUrl,
                dashboardResult.Comment,
                (async () => await EditAsync(dashboardResult.Id)),
                (async () => await DtoService.DeleteAsync(dashboardResult.Id))
            ));
        }
        await base.OnInitializedAsync();
    }

    async Task EditAsync(int id)
    {
        dto = await OpenSearchDialog(id);
        this.StateHasChanged();
    }

    async void AddAsync_Click()
    {
        dto = await OpenSearchDialog();
        this.StateHasChanged();
    }

    async Task LookupAsync_Click()
    {
        dtoLookup = await OpenSearchDialog();
        this.StateHasChanged();
    }

    async Task SaveAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Prompt_Dialog.Prompt), Prompt_Dialog.PromptType.Save);
        parameters.Add(nameof(Prompt_Dialog.ActionAsync), (() => SaveAsync()));
        var result = await DialogService.Show<Prompt_Dialog>(null, parameters).Result;

        if (!result.Cancelled)
        {
            dto.IsUpdate = true;
        }
    }

    async void SaveAsync()
    {
        await DtoService.SaveAsync(dto);
    }

    async Task IdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IdButton_Dialog.Id), dto.Id);
        parameters.Add(nameof(IdButton_Dialog.TDto), typeof(AnimKitDto));
        parameters.Add(nameof(IdButton_Dialog.TDtoIsUpdate), dto.IsUpdate);
        parameters.Add(nameof(IdButton_Dialog.TService), DtoService);
        var dialog = DialogService.Show<IdButton_Dialog>(null, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && (int)result.Data != -1)
        {
            dto.Id = (int)result.Data;
            dto.IsUpdate = false;
        }
    }

    async Task<AnimKitDto?> OpenSearchDialog(int? id = null)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(AnimKitSearch_Dialog.AnimKitId), id);
        var dialog = DialogService.Show<AnimKitSearch_Dialog>(null, dialogParameters);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Cancelled)
        {
            var result = (AnimKitDto)dialogResult.Data;
            if (null != result)
            {
                return (AnimKitDto)dialogResult.Data;
            }
        }
        return null;
    }

    async Task AddSegment_Click()
    {
        dto.Segments.Add(new AnimKitSegmentDto()
        {
            OrderIndex = dto.Segments.Count()
        });
        await InvokeAsync(() => StateHasChanged());
        mudTabsRef.ActivatePanel(mudTabsRef.Panels.Count() - 1);
    }

    void RemoveSegment_Click()
    {
        if(dto.Segments.Count > 1)
        {
            var currentSegment = mudTabsRef.ActivePanelIndex - numberOfStaticTabs;
            dto.Segments.RemoveAt(currentSegment);
            for (int i = 0; i < dto.Segments.Count; i++)
            {
                dto.Segments[i].OrderIndex = i;
            }
            this.StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (dto != null && numberOfStaticTabs == 0)
            numberOfStaticTabs = mudTabsRef.Panels.Where(p => !p.Text.StartsWith("Segment")).Count();
        base.OnAfterRender(firstRender);
    }

    void SegmentChanged(int newSegment)
    {
        this.StateHasChanged();
        mudTabsRef.ActivatePanel(numberOfStaticTabs + newSegment);
    }

    bool TabIsRemovable()
    {
        return dto.Segments.Count > 1 && mudTabsRef.ActivePanelIndex > numberOfStaticTabs - 1;
    }
}

