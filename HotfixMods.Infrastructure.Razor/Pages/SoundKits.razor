@page "/sound-kits"
@using HotfixMods.Infrastructure.Blazor.Pages.SoundKitTabs
@using HotfixMods.Infrastructure.Blazor.RazorDashboard
@using HotfixMods.Infrastructure.Blazor.Components
@using HotfixMods.Infrastructure.DtoModels
@using HotfixMods.Infrastructure.Blazor.Components.Dialogs
@using HotfixMods.Infrastructure.Services
@using Core.Enums

@inject IDialogService DialogService
@inject SoundKitService DtoService


@if (dto != null)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="LookupAsync_Click">Sound Kit Lookup</MudButton>
        </MudStack>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="IdAsync_Click">@dto.Id</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">@(dto.IsUpdate ? "Update" : "Save")</MudButton>
            </MudStack>
        </MudStack>
    <MudPaper>

        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <MudTabPanel Text="Properties">
                <SoundKitProperties_Tab SoundKit="dto" SoundKitLookup="dtoLookup" />
            </MudTabPanel>
        </MudTabs>

    </MudPaper>
}
else
{
    <DashboardTable Data="@(dashboard)" Add="AddAsync_Click" Label="Sound Kits" />
}


@code
{
    SoundKitDto? dto;
    SoundKitDto? dtoLookup;
    List<RazorDashboardModel> dashboard;

    protected override async Task OnInitializedAsync()
    {
        dashboard = new();
        var dashboardResults = await DtoService.GetDashboardAsync();
        foreach (var dashboardResult in dashboardResults)
        {
            dashboard.Add(new RazorDashboardModel(
                dashboardResult.Id,
                dashboardResult.Name,
                dashboardResult.AvatarUrl,
                dashboardResult.Comment,
                (async () => await EditAsync(dashboardResult.Id)),
                (async () => await DtoService.DeleteAsync(dashboardResult.Id))
            ));
        }
        await base.OnInitializedAsync();
    }

    async Task EditAsync(int id)
    {
        dto = await OpenSearchDialog(id);
        this.StateHasChanged();
    }

    async void AddAsync_Click()
    {
        dto = await OpenSearchDialog();
        this.StateHasChanged();
    }

    async Task LookupAsync_Click()
    {
        dtoLookup = await OpenSearchDialog();
        this.StateHasChanged();
    }

    async Task SaveAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Prompt_Dialog.Prompt), Prompt_Dialog.PromptType.Save);
        parameters.Add(nameof(Prompt_Dialog.ActionAsync), (() => SaveAsync()));
        var result = await DialogService.Show<Prompt_Dialog>(null, parameters).Result;

        if (!result.Cancelled)
        {
            dto.IsUpdate = true;
        }
    }

    async void SaveAsync()
    {
        await DtoService.SaveAsync(dto);
    }

    async Task IdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IdButton_Dialog.Id), dto.Id);
        parameters.Add(nameof(IdButton_Dialog.TDto), typeof(SoundKitDto));
        parameters.Add(nameof(IdButton_Dialog.TDtoIsUpdate), dto.IsUpdate);
        parameters.Add(nameof(IdButton_Dialog.TService), DtoService);
        var dialog = DialogService.Show<IdButton_Dialog>(null, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && (int)result.Data != -1)
        {
            dto.Id = (int)result.Data;
            dto.IsUpdate = false;
        }
    }

    async Task<SoundKitDto?> OpenSearchDialog(int? id = null)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SoundKitSearch_Dialog.SoundKitId), id);
        var dialog = DialogService.Show<SoundKitSearch_Dialog>(null, dialogParameters);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Cancelled)
        {
            var result = (SoundKitDto)dialogResult.Data;
            if (null != result)
            {
                return (SoundKitDto)dialogResult.Data;
            }
        }
        return null;
    }
}

