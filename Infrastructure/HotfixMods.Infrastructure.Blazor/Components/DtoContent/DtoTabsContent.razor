@typeparam T where T : IDto
@using System.Reflection

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" ActivePanelIndexChanged="PanelChanged">
    @foreach (var tab in tabs)
    {
        <MudTabPanel>
            <TabContent>
                <TabTitle_Element Title="@tab.TabPanelName" />
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>
<MudCarousel @ref="mudCarouselRef" Style="width:100%; height:640px;" TData="object" ShowArrows="false" ShowBullets="false" AutoCycle="false">
    @foreach (var tab in tabs)
    {
        <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="transition-tab" CustomTransitionExit="transition-fade">
            <DynamicComponent Type="tab.ComponentType" Parameters="@(new Dictionary<string, object>(){ { "GroupName", tab.GroupName } })" />
        </MudCarouselItem>
    }
</MudCarousel>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    List<Content> tabs = new();
    MudCarousel<object>? mudCarouselRef;

    protected override void OnInitialized()
    {
        var properties = typeof(T).GetProperties();
        // TODO: Hardcode Entity here, to come first
        InitTabsList(properties);

        base.OnInitialized();
    }

    // Recusrive method to extract properties from DTO and DTO group lists
    void InitTabsList(PropertyInfo[] properties, string? groupName = null)
    {
        foreach (var property in properties)
        {
            if (property.Name.EndsWith("Groups"))
            {
                if (property.PropertyType.IsAssignableFrom(typeof(List<>)))
                {
                    // TODO: Why does this fail?
                }
                var groupType = property.PropertyType.GetGenericArguments()[0];
                var groupProperties = groupType.GetProperties();
                InitTabsList(groupProperties, groupType.Name);
            }
            else
            {
                var tabName = property.Name;
                var tabType = TryGetTabType(tabName);
                if (null == tabType)
                    continue;
                tabs.Add(new Content(tabName, tabType, groupName));
            }
        }
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }

    void PanelChanged(int newIndex)
    {
        mudCarouselRef?.MoveTo(newIndex);
    }

    class Content
    {
        public Content(string tabPanelName, Type componentType, string? groupName)
        {
            TabPanelName = tabPanelName;
            ComponentType = componentType;
            GroupName = groupName;
        }
        public string TabPanelName { get; set; }
        public Type ComponentType { get; set; }
        public string? GroupName { get; set; }
    }
}
