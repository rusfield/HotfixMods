@typeparam T where T : IDto
@using System.Reflection

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" ActivePanelIndexChanged="PanelChanged">
    @foreach (var tab in tabs)
    {
        <MudTabPanel>
            <TabContent>
                <TabTitle_Element Title="@tab.TabPanelName" />
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>
<MudPaper Style="height:640px;background-color:var(--mud-palette-surface)" Class="mx-3 rounded-0">
    <MudCarousel @ref="mudCarouselRef" Style="position:fixed;width:100vw; height:640px;left:0" TData="object" ShowArrows="false" ShowBullets="false" AutoCycle="false">
        @foreach (var tab in tabs)
        {
            <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="transition-tab" CustomTransitionExit="transition-fade">
                <div style="width:1232px; margin: 0 auto;">
                    <DynamicComponent Type="tab.ComponentType" Parameters="@(new Dictionary<string, object>(){ { "GroupType", tab.GroupType } })" />
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
</MudPaper>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%">
        <MudStack Row="true" Class="invisible" Spacing="0">
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" />
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" />
        </MudStack>
        <MudPagination @ref="mudPaginationRef" Selected="0" Size="Size.Medium" Count="5" Color="Color.Info" />
        <MudStack Row="true" Spacing="0">
            <MudIconButton Icon="@Icons.Material.Filled.MoveDown" />
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" />
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" />
            <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" />
        </MudStack>
    </MudStack>
</MudPaper>

@code {

    List<Content> tabs = new();
    MudCarousel<object>? mudCarouselRef;
    MudPagination? mudPaginationRef;

    protected override void OnInitialized()
    {
        var properties = typeof(T).GetProperties();
        // TODO: Hardcode Entity here, to come first
        InitTabsList(properties);

        base.OnInitialized();
    }

    // Recusrive method to extract properties from DTO and DTO group lists
    void InitTabsList(PropertyInfo[] properties, Type? groupType = null)
    {
        foreach (var property in properties)
        {
            if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(List<>))
            {
                groupType = property.PropertyType.GetGenericArguments()[0];
                var groupProperties = groupType.GetProperties();
                InitTabsList(groupProperties, groupType);
            }
            else
            {
                var tabName = property.Name;
                var tabType = TryGetTabType(tabName);
                if (null == tabType)
                    continue;
                tabs.Add(new Content(tabName, tabType, groupType));
            }
        }
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }

    void PanelChanged(int newIndex)
    {
        mudCarouselRef?.MoveTo(newIndex);
    }

    class Content
    {
        public Content(string tabPanelName, Type componentType, Type? groupType)
        {
            TabPanelName = tabPanelName;
            ComponentType = componentType;
            GroupType = groupType;
        }
        public string TabPanelName { get; set; }
        public Type ComponentType { get; set; }
        public Type? GroupType { get; set; }
    }
}
