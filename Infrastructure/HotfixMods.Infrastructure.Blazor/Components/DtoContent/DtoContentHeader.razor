@typeparam T where T : IDto

<MudTabs Style="margin-top:0px !important;" Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar">
    @foreach (var tab in tabNames)
    {
        var type = TryGetTabType(tab);
        if (null == type)
            continue;

        <MudTabPanel Text="@tab">
            <TabContent>
                <TabTitle_Element Title="@tab" />
            </TabContent>
            <ChildContent>
                <div class="animate__animated animate__backInDown">
                    <DynamicComponent Type="type" />
                </div>
            </ChildContent>
        </MudTabPanel>
    }

</MudTabs>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    List<string> tabNames = new();

    protected override void OnInitialized()
    {
        foreach (var property in typeof(T).GetProperties())
        {
            tabNames.Add(property.Name);
        }
        base.OnInitialized();
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }
}
