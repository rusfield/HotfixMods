@typeparam T where T : IDto

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" ActivePanelIndexChanged="PanelChanged">
    @foreach (var tab in tabs)
    {
        <MudTabPanel>
            <TabContent>
                <TabTitle_Element Title="@tab.Key" />
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>
<MudCarousel @ref="mudCarouselRef" Style="width:100%; height:640px;" TData="object" ShowArrows="false" ShowBullets="false" AutoCycle="false">
    @foreach (var tab in tabs)
    {
        <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="transition-tab" CustomTransitionExit="transition-fade">
            <DynamicComponent Type="tab.Value" />
        </MudCarouselItem>
    }
</MudCarousel>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    Dictionary<string, Type> tabs = new();
    MudCarousel<object>? mudCarouselRef;

    protected override void OnInitialized()
    {
        foreach (var property in typeof(T).GetProperties())
        {
            var tabName = property.Name;
            var tabType = TryGetTabType(tabName);
            if (null == tabType)
                continue;
            tabs.Add(tabName, tabType);
        }
        base.OnInitialized();
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }

    void PanelChanged(int newIndex)
    {
        mudCarouselRef?.MoveTo(newIndex);
    }
}
