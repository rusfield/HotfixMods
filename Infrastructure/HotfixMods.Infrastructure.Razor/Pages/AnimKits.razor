@using Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.AnimKitTabs

@inject AnimKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<AnimKitSearch_Dialog>" Title="Anim Kits">
    </TabContentView>
}
else
{
    <CascadingValue Value="this">
        <TabContentEditHeader IsUpdate="false" Title="Anim Kits" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<AnimKitSearch_Dialog>())">
            <ChildContent>
                <MudTabPanel Text="Entity">
                    <TabContentEditBody>
                        <AnimKitEntity_Tab Value="((AnimKitDto)PageTab.Dto).Entity" />
                    </TabContentEditBody>
                </MudTabPanel>
                <MudTabPanel Text="Anim Kit">
                    <TabContentEditBody>
                        <AnimKit_Tab Value="((AnimKitDto)PageTab.Dto).AnimKit" ValueCompare="((AnimKitDto?)PageTab.DtoCompare)?.AnimKit" />
                    </TabContentEditBody>
                </MudTabPanel>
                <MudTabPanel Text="Segments">
                    <TabContentEditBody AmountOfPages="((AnimKitDto?)PageTab.Dto).AnimKitSegments.Count" AddPage_EventCallback="AddSegment_Click" RemovePage_EventCallback="RemoveSegment_Click" NavigatePage_EventCallback="NavigateSegmentPage_Click" @bind-CurrentPage="currentSegmentPage">
                        @if (((AnimKitDto?)PageTab.Dto).AnimKitSegments.Any())
                        {
                            foreach ((var animKitSegment, int index) in ((AnimKitDto?)PageTab.Dto).AnimKitSegments.WithIndex())
                            {
                                <AnimKitSegment_Tab Value="animKitSegment" ValueCompare="@(PageTab.DtoCompare != null && ((AnimKitDto?)PageTab.DtoCompare)?.AnimKitSegments.Count > index ? ((AnimKitDto?)PageTab.DtoCompare)?.AnimKitSegments[index] : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData />
                        }
                    </TabContentEditBody>
                </MudTabPanel>
            </ChildContent>
        </TabContentEditHeader>
    </CascadingValue>
}

@code {
    int currentSegmentPage = 1;

    void AddSegment_Click()
    {
        if (PageTab.Dto != null)
        {
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.Add(new());
            this.StateHasChanged();
        }
    }

    void RemoveSegment_Click(int page)
    {
        if (PageTab.Dto != null && ((AnimKitDto)PageTab.Dto).AnimKitSegments.Count >= page)
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.RemoveAt(page - 1);
        else
            return;

        if (currentSegmentPage == page)
        {
            if (!((AnimKitDto?)PageTab.Dto).AnimKitSegments.Any())
                currentSegmentPage = 0;
            else
                currentSegmentPage = Math.Max(1, page - 1);
        }
    }

    void NavigateSegmentPage_Click(int page)
    {
        currentSegmentPage = page;
    }
}