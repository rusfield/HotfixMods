@using Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.AnimKitTabs

@inject AnimKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<AnimKitSearch_Dialog>" Title="Anim Kits">
    </TabContentView>
}
else
{
    <TabContentEditHeader @ref="tabContentEditHeaderRef" IsUpdate="false" Title="Anim Kits" AddClick_Callback="AddTab_Click" AddTooltip="Add new segment" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<AnimKitSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Text="Entity">
                <TabContentEditBody>
                    <AnimKitEntity_Tab Value="((AnimKitDto)PageTab.Dto).Entity" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Anim Kit">
                <TabContentEditBody>
                    <AnimKit_Tab Value="((AnimKitDto)PageTab.Dto).AnimKit" ValueCompare="((AnimKitDto?)PageTab.DtoCompare)?.AnimKit" />
                </TabContentEditBody>
            </MudTabPanel>
            @foreach (var (item, index) in ((AnimKitDto)PageTab.Dto).AnimKitSegments.WithIndex())
            {
                <MudTabPanel>
                    <ChildContent>
                        <TabContentEditBody>
                            <AnimKitSegment_Tab AnimKitPage="this" Value="item" ValueCompare="@(PageTab.DtoCompare != null ? ((AnimKitDto?)PageTab.DtoCompare)?.AnimKitSegments[index] : null)" />
                        </TabContentEditBody>
                    </ChildContent>
                    <TabContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width:100%;">
                            <MudText>@($"SEGMENT #{index + 1}")</MudText><MudIcon Icon="@Icons.Filled.Close" Color="Color.Dark" onclick="@(() => RemoveTab_Click(index))" />
                        </MudStack>
                    </TabContent>
                </MudTabPanel>
            }
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    TabContentEditHeader? tabContentEditHeaderRef;


    void AddTab_Click()
    {
        if (PageTab.Dto != null)
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.Add(new AnimKitSegment() { OrderIndex = (byte)((AnimKitDto)PageTab.Dto).AnimKitSegments.Count });
    }

    void RemoveTab_Click(int index)
    {
        if (PageTab.Dto != null)
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.RemoveAt(index);
    }

    public void SetPanelIndex(int panelIndex)
    {
        tabContentEditHeaderRef?.SetPanelIndex(panelIndex);
    }
}