@using Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.AnimKitTabs

@inject AnimKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<AnimKitSearch_Dialog>" Title="Anim Kits">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Anim Kits" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<AnimKitSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Text="Entity">
                <TabContentEditBody>
                    <AnimKitEntity_Tab Value="((AnimKitDto)PageTab.Dto).Entity" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Anim Kit">
                <TabContentEditBody>
                    <AnimKit_Tab Value="((AnimKitDto)PageTab.Dto).AnimKit" ValueCompare="((AnimKitDto?)PageTab.DtoCompare)?.AnimKit" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Segments">
                <TabContentEditBody AmountOfInstances="((AnimKitDto?)PageTab.Dto).AnimKitSegments.Count" AddInstance_EventCallback="AddSegment_Click" RemoveInstance_EventCallback="RemoveSegment_Click" @bind-CurrentInstance="currentSegmentInstance">
                    @if (((AnimKitDto?)PageTab.Dto).AnimKitSegments.Any())
                    {
                        foreach ((var animKitSegment, int index) in ((AnimKitDto?)PageTab.Dto).AnimKitSegments.WithIndex())
                        {
                            <AnimKitSegment_Tab Value="animKitSegment" ValueCompare="@(PageTab.DtoCompare != null && ((AnimKitDto?)PageTab.DtoCompare)?.AnimKitSegments.Count > index ? ((AnimKitDto?)PageTab.DtoCompare)?.AnimKitSegments[index] : null)" />
                        }
                    }
                    else
                    {
                        <TabContentNoData />
                    }
                </TabContentEditBody>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentSegmentInstance = 1;

    void AddSegment_Click()
    {
        if (PageTab.Dto != null)
        {
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.Add(new());
            currentSegmentInstance = ((AnimKitDto)PageTab.Dto).AnimKitSegments.Count;
        }
    }

    void RemoveSegment_Click(int page)
    {
        if (PageTab.Dto != null && ((AnimKitDto)PageTab.Dto).AnimKitSegments.Count >= page)
            ((AnimKitDto)PageTab.Dto).AnimKitSegments.RemoveAt(page - 1);
        else
            return;

        if (currentSegmentInstance == page)
        {
            if (!((AnimKitDto?)PageTab.Dto).AnimKitSegments.Any())
                currentSegmentInstance = 0;
            else
                currentSegmentInstance = Math.Max(1, page - 1);
        }
    }
}