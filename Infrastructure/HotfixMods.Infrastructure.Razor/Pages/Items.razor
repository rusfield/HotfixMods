@using HotfixMods.Infrastructure.Razor.Pages.ItemTabs
@using HotfixMods.Infrastructure.Razor.Pages.Shared
@using HotfixMods.Infrastructure.Razor.Components.Dialogs

@inject ItemService Service
@inherits HotfixPageBase<ItemDto>

@if (null == PageTab.Dto)
{
    <TabContentView NewAsync_Callback="NewAsync_Click<ItemSearch_Dialog>" Title="Items">
    </TabContentView>
}
else
{
    @*
    <TabContentEditHeader IsUpdate="false" Title="Items" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<ItemSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="HotfixMods" Line2="Entity" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="HotfixModsEntity" Value="((ItemDto)PageTab.Dto).HotfixModsEntity">
                        <HotfixModsEntity_Tab @bind-IsUpdate="((ItemDto)PageTab.Dto).IsUpdate" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="Item" Value="((ItemDto)PageTab.Dto).Item">
                        <Item_Tab />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item" Line2="Sparse" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="ItemSparse" AmountOfPages="5" @bind-CurrentPage="currentItemSparsePage" Value="((ItemDto)PageTab.Dto).ItemSparse" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemSparse">
                        <ItemSparse_Tab />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item Display Info" Line2="Material Res" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <ItemDisplayInfoMaterialRes_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfoMaterialRes" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfoMaterialRes" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Display" Line2="Info" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object" AmountOfPages="2" @bind-CurrentPage="currentItemDisplayInfoPage">
                        <ItemDisplayInfo_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfo" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfo" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item" Line2="Appearance" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <ItemAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemAppearance" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item Modified" Line2="Appearance" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <ItemModifiedAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemModifiedAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemModifiedAppearance" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Item" Line2="Effect" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="ItemDto.EffectGroup" Instances="((ItemDto?)PageTab.Dto).EffectGroups" @bind-CurrentInstance="currentEffectInstance">
                        @if (((ItemDto?)PageTab.Dto).EffectGroups.Any())
                        {
                            foreach ((var effect, int index) in ((ItemDto?)PageTab.Dto).EffectGroups.WithIndex())
                            {
                                <ItemEffect_Tab Value="effect.ItemEffect" ValueCompare="@(PageTab.DtoCompare != null && ((ItemDto?)PageTab.DtoCompare)?.EffectGroups.Count > index ? ((ItemDto?)PageTab.DtoCompare)?.EffectGroups[index].ItemEffect : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Item Effects yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
    *@
}

@code {
    int currentItemSparsePage = 1;
    int currentItemDisplayInfoPage = 1;

    int currentEffectInstance = 1;
}