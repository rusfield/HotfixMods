@using HotfixMods.Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.ItemTabs
@using HotfixMods.Infrastructure.Razor.Components.Dialogs

@inject ItemService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<ItemSearch_Dialog>" Title="Items">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Items" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<ItemSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Text="Entity">
                <TabContentEditBody>
                    <ItemEntity_Tab Value="((ItemDto)PageTab.Dto).Entity" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Item">
                <TabContentEditBody>
                    <Item_Tab Value="((ItemDto)PageTab.Dto).Item" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Item Sparse">
                <TabContentEditBody AmountOfPages="5" CurrentPage="currentItemSparsePage">
                    <ItemSparse_Tab Value="((ItemDto)PageTab.Dto).ItemSparse" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemSparse" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Material Res">
                <TabContentEditBody>
                    <ItemDisplayInfoMaterialRes_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfoMaterialRes" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfoMaterialRes" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Display Info">
                <TabContentEditBody AmountOfPages="2" CurrentPage="currentItemDisplayInfoPage">
                    <ItemDisplayInfo_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfo" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfo" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Appearance">
                <TabContentEditBody>
                    <ItemAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemAppearance" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Modified Appearance">
                <TabContentEditBody>
                    <ItemModifiedAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemMItemModifiedAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemMItemModifiedAppearance" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Item Effects">
                <TabContentEditBody AmountOfInstances="((ItemDto?)PageTab.Dto).ItemEffects.Count" AddInstance_EventCallback="AddItemEffect_Click" RemoveInstance_EventCallback="RemoveItemEffect_Click" @bind-CurrentInstance="currentItemEffectInstance">
                    @if (((ItemDto?)PageTab.Dto).ItemEffects.Any())
                    {
                        foreach ((var itemEffect, int index) in ((ItemDto?)PageTab.Dto).ItemEffects.WithIndex())
                        {
                            <ItemEffect_Tab Value="itemEffect" ValueCompare="@(PageTab.DtoCompare != null && ((ItemDto?)PageTab.DtoCompare)?.ItemEffects.Count > index ? ((ItemDto?)PageTab.DtoCompare)?.ItemEffects[index] : null)" />
                        }
                    }
                    else
                    {
                        <TabContentNoData />
                    }
                </TabContentEditBody>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentItemSparsePage = 1;
    int currentItemDisplayInfoPage = 1;

    int currentItemEffectInstance = 1;


    void AddItemEffect_Click()
    {
        if (PageTab.Dto != null)
        {
            ((ItemDto)PageTab.Dto).ItemEffects.Add(new());
            currentItemEffectInstance = ((ItemDto)PageTab.Dto).ItemEffects.Count;
            this.StateHasChanged();
        }
    }

    void RemoveItemEffect_Click(int page)
    {
        if (PageTab.Dto != null && ((ItemDto)PageTab.Dto).ItemEffects.Count >= page)
            ((ItemDto)PageTab.Dto).ItemEffects.RemoveAt(page - 1);
        else
            return;

        if (currentItemEffectInstance == page)
        {
            if (!((ItemDto?)PageTab.Dto).ItemEffects.Any())
                currentItemEffectInstance = 0;
            else
                currentItemEffectInstance = Math.Max(1, page - 1);
        }
    }
}