@using HotfixMods.Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.ItemTabs
@using HotfixMods.Infrastructure.Razor.Components.Dialogs

@inject ItemService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<ItemSearch_Dialog>" Title="Items">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Items" AddClick_Callback="AddSegment_Click" AddTooltip="Add new item effect" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<ItemSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Text="Entity">
                <TabContentEditBody>
                    <ItemEntity_Tab Value="((ItemDto)PageTab.Dto).Entity" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Item">
                <TabContentEditBody>
                    <Item_Tab Value="((ItemDto)PageTab.Dto).Item" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Item Sparse">
                <TabContentEditBody>
                    <ItemSparse_Tab Value="((ItemDto)PageTab.Dto).ItemSparse" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemSparse" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Material Res">
                <TabContentEditBody>
                    <ItemDisplayInfoMaterialRes_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfoMaterialRes" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfoMaterialRes" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Display Info">
                <TabContentEditBody>
                    <ItemDisplayInfo_Tab Value="((ItemDto)PageTab.Dto).ItemDisplayInfo" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemDisplayInfo" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Appearance">
                <TabContentEditBody>
                    <ItemAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemAppearance" />
                </TabContentEditBody>
            </MudTabPanel>
            <MudTabPanel Text="Modified Appearance">
                <TabContentEditBody>
                    <ItemModifiedAppearance_Tab Value="((ItemDto)PageTab.Dto).ItemMItemModifiedAppearance" ValueCompare="((ItemDto?)PageTab.DtoCompare)?.ItemMItemModifiedAppearance" />
                </TabContentEditBody>
            </MudTabPanel>
            @foreach (var (item, index) in ((ItemDto)PageTab.Dto).ItemEffects.WithIndex())
            {
                <MudTabPanel Text="@($"Effect #{index + 1}")">
                    <TabContentEditBody>
                        <ItemEffect_Tab Value="item" ValueCompare="@(PageTab.DtoCompare != null ? ((ItemDto?)PageTab.DtoCompare)?.ItemEffects[index] : null)" />
                    </TabContentEditBody>
                </MudTabPanel>
            }
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    void AddSegment_Click()
    {
        if (PageTab.Dto != null)
            ((ItemDto)PageTab.Dto).ItemEffects.Add(new ItemEffect());
    }
}