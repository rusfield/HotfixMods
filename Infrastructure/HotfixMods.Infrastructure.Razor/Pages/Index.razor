@page "/"

@using HotfixMods.Infrastructure.Razor.PageData
@using HotfixMods.Infrastructure.Razor.Handlers

@inject IDialogService DialogService

<MudTabs @ref="_mudTabsRef" Elevation="2" Centered="true" Color="Color.Dark" KeepPanelsAlive="true">
    <Header>
        <MudTooltip Text="New">
            <MudIconButton Icon="@Icons.Filled.AddCircleOutline" Style="color:var(--mud-palette-text-primary)" OnClick="NewTab_Click" />
        </MudTooltip>
    </Header>
    <ChildContent>
        @foreach (var (tab, index) in Tabs.WithIndex())
        {
            <MudTabPanel ID="@tab.TabId">
                <ChildContent>
                    <MudContainer MaxWidth="MaxWidth.Large" Class="my-12 pt-12">
                        <DynamicComponent Type="tab.PageType" Parameters="@(new Dictionary<string, object>(){ {nameof(PageTab), tab } })" />
                    </MudContainer>
                </ChildContent>
                <TabContent>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width:100%;">
                        <MudText Typo="Typo.subtitle2">@tab.TabName.ToUpper()</MudText><MudIcon Icon="@Icons.Filled.Close" Color="Color.Dark" onclick="@(() => CloseTab_Click(tab.TabId))" />
                    </MudStack>
                </TabContent>
            </MudTabPanel>
        }
    </ChildContent>
</MudTabs>

<MudDrawer @bind-Open="@_menuOpen" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Align="Align.Center" Style="width:100%">My App</MudText>
    </MudDrawerHeader>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="3" Style="width:100%;">
        <MudIconButton Icon="@Icons.Filled.MonitorHeart" Color="Color.Inherit" Size="Size.Small" />
        <MudIconButton Icon="@Icons.Filled.Settings" Color="Color.Inherit" Size="Size.Small" />
        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>
        <MudIconButton Icon="@Icons.Filled.FaceRetouchingNatural" Size="Size.Large" Color="Color.Inherit" OnClick="@(() => OpenTab_Click(new PageTab("Creatures", typeof(Creatures))))" />
        <MudIconButton Icon="@Icons.Filled.Security" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab("Items", typeof(Items))))" />
        <MudIconButton Icon="@Icons.Filled.LocalFireDepartment" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab("Spells", typeof(Spells))))" />
        <MudIconButton Icon="@Icons.Filled.OutlinedFlag" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab("Game Objects", typeof(Gameobjects))))" />

        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudIconButton Icon="@Icons.Filled.MoreHoriz" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>Spell Visual Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab("Sound Kit", typeof(SoundKits))))">Sound Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab("Anim Kit", typeof(AnimKits))))">Anim Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab("Generic Hotfix", typeof(GenericHotfixes))))">Custom Hotfix</MudMenuItem>

                <MudMenuItem OnClick="@(() => OpenDialog_Click<AnimKitSearch_Dialog>(new PageTab("Anim Kit", typeof(AnimKits))))">Test</MudMenuItem>
            </ChildContent>
        </MudMenu>

        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>
        <MudText Color="Color.Inherit" Typo="Typo.subtitle2">Hotfix Mods</MudText>

    </MudStack>
</MudDrawer>


@code {
    MudTabs? _mudTabsRef;

    bool _menuOpen = false;
    List<PageTab> Tabs = new();
    Guid tabId = Guid.Empty;

    void NewTab_Click()
    {
        _menuOpen = true;
    }

    void LaunchTab(PageTab tab)
    {
        _menuOpen = false;
        Tabs.Add(tab);
        tabId = tab.TabId;
        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        GlobalHandler.LaunchTab = LaunchTab;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(tabId != Guid.Empty)
        {
            _mudTabsRef?.ActivatePanel(tabId);
            tabId = Guid.Empty;
        }

        base.OnAfterRender(firstRender);
    }

    void OpenTab_Click(PageTab tab)
    {
        LaunchTab(tab);
    }

    void CloseTab_Click(Guid tabId)
    {
        Tabs.RemoveAll(t => t.TabId == tabId);
    }

    protected async void OpenDialog_Click<TDialog>(PageTab pageTab)
        where TDialog : ComponentBase
    {
        var result = await DialogService.Show<TDialog>().Result;
        if (!result.Cancelled && result.Data != null)
        {
            pageTab.Dto = result.Data;
            pageTab.TabName = ((BaseDto)result.Data).DisplayName;
            LaunchTab(pageTab);
        }
    }
}