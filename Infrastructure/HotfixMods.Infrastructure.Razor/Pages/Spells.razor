@using Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.SpellTabs

@inject SpellService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<SpellSearch_Dialog>" Title="Spells">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Spells" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<SpellSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="HotfixMods" Line2="Entity" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellEntity_Tab Value="((SpellDto)PageTab.Dto).Entity" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <Spell_Tab Value="((SpellDto)PageTab.Dto).Spell" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Name" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellName_Tab Value="((SpellDto)PageTab.Dto).SpellName" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Power" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellPower_Tab Value="((SpellDto)PageTab.Dto).SpellPower" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Cooldowns" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellCooldowns_Tab Value="((SpellDto)PageTab.Dto).SpellCooldowns" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Misc" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellMisc_Tab Value="((SpellDto)PageTab.Dto).SpellMisc" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell Aura" Line2="Options" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellAuraOptions_Tab Value="((SpellDto)PageTab.Dto).SpellAuraOptions" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Effect" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="SpellDto.EffectGroup" Instances="((SpellDto?)PageTab.Dto)?.EffectGroups" @bind-CurrentInstance="currentEffectInstance">
                        @if (((SpellDto?)PageTab.Dto).EffectGroups.Any())
                        {
                            foreach ((var effect, int index) in ((SpellDto?)PageTab.Dto).EffectGroups.WithIndex())
                            {
                                <SpellEffect_Tab Value="effect.SpellEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellDto?)PageTab.DtoCompare)?.EffectGroups.Count > index ? ((SpellDto?)PageTab.DtoCompare)?.EffectGroups[index].SpellEffect : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Spell Effects yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Visual Event" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="SpellDto.VisualGroup" Instances="((SpellDto?)PageTab.Dto)?.VisualGroups" @bind-CurrentInstance="currentEffectInstance">
                        @if (((SpellDto?)PageTab.Dto).VisualGroups.Any())
                        {
                            foreach ((var visual, int index) in ((SpellDto?)PageTab.Dto).VisualGroups.WithIndex())
                            {
                                <SpellVisualEvent_Tab Value="visual.SpellVisualEvent" ValueCompare="@(PageTab.DtoCompare != null && ((SpellDto?)PageTab.DtoCompare)?.VisualGroups.Count > index ? ((SpellDto?)PageTab.DtoCompare)?.VisualGroups[index].SpellVisualEvent : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Spell Visuals yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Visual" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="SpellDto.VisualGroup" Instances="((SpellDto?)PageTab.Dto)?.VisualGroups" @bind-CurrentInstance="currentEffectInstance">
                        @if (((SpellDto?)PageTab.Dto).VisualGroups.Any())
                        {
                            foreach ((var visual, int index) in ((SpellDto?)PageTab.Dto).VisualGroups.WithIndex())
                            {
                                <SpellVisual_Tab Value="visual.SpellVisual" ValueCompare="@(PageTab.DtoCompare != null && ((SpellDto?)PageTab.DtoCompare)?.VisualGroups.Count > index ? ((SpellDto?)PageTab.DtoCompare)?.VisualGroups[index].SpellVisual : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Spell Visuals yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentEffectInstance = 1;
    int currentVisualInstance = 1;

}