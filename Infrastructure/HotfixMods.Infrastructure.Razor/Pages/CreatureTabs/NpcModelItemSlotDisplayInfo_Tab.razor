@using HotfixMods.Core.Enums.Db2

@inherits HotfixPageTabBase<NpcModelItemSlotDisplayInfo>

@*
This page is custom made. NPCs should not have multiple items of the same slot equiped, so to make GUI more convenient it is made like this.
*@

<MudCarouselItem Transition="TransitionHandler.Transition" CustomTransitionEnter="@TransitionHandler.EnterTransition" CustomTransitionExit="@TransitionHandler.ExitTransition">
    <MudGrid>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="head.ItemDisplayInfoId" ValueCompare="headCompare?.ItemDisplayInfoId" Label="Head Display Info ID" />
            <Input_Element T="int" @bind-Value="shoulders.ItemDisplayInfoId" ValueCompare="shouldersCompare?.ItemDisplayInfoId" Label="Shoulders Display Info ID" />
            <Input_Element T="int" @bind-Value="shirt.ItemDisplayInfoId" ValueCompare="shirtCompare?.ItemDisplayInfoId" Label="Shirt Display Info ID" />
            <Input_Element T="int" @bind-Value="chest.ItemDisplayInfoId" ValueCompare="chestCompare?.ItemDisplayInfoId" Label="Chest Display Info ID" />
        </MudItem>
        <MudItem xs="6">
            <Placeholder_Element Amount="4" />
            <InlineGroup Merged="false">
                <LeftContent>
                    <Input_Element T="int" @bind-Value="hands.ItemDisplayInfoId" ValueCompare="handsCompare?.ItemDisplayInfoId" Label="Hands Display Info ID" />
                </LeftContent>
                <RightContent>
                    <Input_Element T="int" @bind-Value="tabard.ItemDisplayInfoId" ValueCompare="tabardCompare?.ItemDisplayInfoId" Label="Tabard Display Info ID" />
                </RightContent>
            </InlineGroup>
            <InlineGroup Merged="false">
                <LeftContent>
                    <Input_Element T="int" @bind-Value="cape.ItemDisplayInfoId" ValueCompare="capeCompare?.ItemDisplayInfoId" Label="Cape Display Info ID" />
                </LeftContent>
                <RightContent>
                    <Input_Element T="int" @bind-Value="quiver.ItemDisplayInfoId" ValueCompare="quiverCompare?.ItemDisplayInfoId" Label="Quiver Display Info ID" />
                </RightContent>
            </InlineGroup>
        </MudItem>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="waist.ItemDisplayInfoId" ValueCompare="waistCompare?.ItemDisplayInfoId" Label="Waist Display Info ID" />
            <Input_Element T="int" @bind-Value="legs.ItemDisplayInfoId" ValueCompare="legsCompare?.ItemDisplayInfoId" Label="Legs Display Info ID" />
            <Input_Element T="int" @bind-Value="feet.ItemDisplayInfoId" ValueCompare="feetCompare?.ItemDisplayInfoId" Label="Feet Display Info ID" />
            <Input_Element T="int" @bind-Value="wrists.ItemDisplayInfoId" ValueCompare="wristsCompare?.ItemDisplayInfoId" Label="Wrists Display Info ID" />
        </MudItem>
    </MudGrid>
</MudCarouselItem>

@code {
    [Parameter]
    public List<NpcModelItemSlotDisplayInfo> Values { get; set; }

    [Parameter]
    public List<NpcModelItemSlotDisplayInfo>? ValueCompares { get; set; }

    NpcModelItemSlotDisplayInfo head;
    NpcModelItemSlotDisplayInfo shoulders;
    NpcModelItemSlotDisplayInfo shirt;
    NpcModelItemSlotDisplayInfo chest;
    NpcModelItemSlotDisplayInfo hands;
    NpcModelItemSlotDisplayInfo tabard;
    NpcModelItemSlotDisplayInfo cape;
    NpcModelItemSlotDisplayInfo quiver;
    NpcModelItemSlotDisplayInfo waist;
    NpcModelItemSlotDisplayInfo legs;
    NpcModelItemSlotDisplayInfo feet;
    NpcModelItemSlotDisplayInfo wrists;

    NpcModelItemSlotDisplayInfo? headCompare;
    NpcModelItemSlotDisplayInfo? shouldersCompare;
    NpcModelItemSlotDisplayInfo? shirtCompare;
    NpcModelItemSlotDisplayInfo? chestCompare;
    NpcModelItemSlotDisplayInfo? handsCompare;
    NpcModelItemSlotDisplayInfo? tabardCompare;
    NpcModelItemSlotDisplayInfo? capeCompare;
    NpcModelItemSlotDisplayInfo? quiverCompare;
    NpcModelItemSlotDisplayInfo? waistCompare;
    NpcModelItemSlotDisplayInfo? legsCompare;
    NpcModelItemSlotDisplayInfo? feetCompare;
    NpcModelItemSlotDisplayInfo? wristsCompare;

    protected override void OnAfterRender(bool firstRender)
    {
        head = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        shoulders = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        shirt = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        chest = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        hands = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        tabard = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        cape = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        quiver = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        waist = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        legs = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        feet = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        wrists = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();

        if (ValueCompares != null)
        {
            headCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            shouldersCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            shirtCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            chestCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            handsCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            tabardCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            capeCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            quiverCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            waistCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            legsCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            feetCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
            wristsCompare = Values.Where(v => (NpcModelItemSlotDisplayInfoItemSlot)v.ItemSlot == NpcModelItemSlotDisplayInfoItemSlot.HEAD).FirstOrDefault() ?? new();
        }
        else
        {
            headCompare = null;
            shouldersCompare = null;
            shirtCompare = null;
            chestCompare = null;
            handsCompare = null;
            tabardCompare = null;
            capeCompare = null;
            quiverCompare = null;
            waistCompare = null;
            legsCompare = null;
            feetCompare = null;
            wristsCompare = null;
        }

        base.OnAfterRender(firstRender);
    }
}