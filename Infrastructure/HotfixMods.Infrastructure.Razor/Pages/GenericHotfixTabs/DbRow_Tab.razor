@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Extensions;
@using HotfixMods.Infrastructure.Razor.Components.Elements

@inherits HotfixPageTabBase<DbRow>
@inject GenericHotfixService Service
@inject IDialogService DialogService

<MudGrid>
    @for (int i = 24 * CurrentPageIndex; i < (24 * CurrentPageIndex) + 24; i++)
    {
        if (Value.Columns.Count == i)
        {
            break;
        }
        var column = Value.Columns[i];
        int index = i;

        <MudItem xs="3">
            @if (column.Name.Equals("id", StringComparison.InvariantCultureIgnoreCase))
            {
                <IntInput_Element T="int" Value="(int)column.Value" ValueChanged="((int value) => column.Value = value)" Label="@column.Name" AdornmentIcon="@Icons.Filled.Refresh" OnAdornmentClick="NextIdAsync_Click" />
            }
            else if (column.Type == typeof(int))
            {
                <IntInput_Element T="int" Value="(int)column.Value" ValueLookup="@(ValueLookup != null ? (int?)ValueLookup.Columns[index].Value : null)" ValueChanged="((int value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(uint))
            {
                <IntInput_Element T="uint" Value="(uint)column.Value" ValueLookup="@(ValueLookup != null ? (uint?)ValueLookup.Columns[index].Value : null)" ValueChanged="((uint value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(long))
            {
                <IntInput_Element T="long" Value="(long)column.Value" ValueLookup="@(ValueLookup != null ? (long?)ValueLookup.Columns[index].Value : null)" ValueChanged="((long value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(ulong))
            {
                <IntInput_Element T="ulong" Value="(ulong)column.Value" ValueLookup="@(ValueLookup != null ? (ulong?)ValueLookup.Columns[index].Value : null)" ValueChanged="((ulong value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(sbyte))
            {
                <IntInput_Element T="sbyte" Value="(sbyte)column.Value" ValueLookup="@(ValueLookup != null ? (sbyte?)ValueLookup.Columns[index].Value : null)" ValueChanged="((sbyte value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(byte))
            {
                <IntInput_Element T="byte" Value="(byte)column.Value" ValueLookup="@(ValueLookup != null ? (byte?)ValueLookup.Columns[index].Value : null)" ValueChanged="((byte value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(short))
            {
                <IntInput_Element T="short" Value="(short)column.Value" ValueLookup="@(ValueLookup != null ? (short?)ValueLookup.Columns[index].Value : null)" ValueChanged="((short value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(ushort))
            {
                <IntInput_Element T="ushort" Value="(ushort)column.Value" ValueLookup="@(ValueLookup != null ? (ushort?)ValueLookup.Columns[index].Value : null)" ValueChanged="((ushort value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(decimal))
            {
                <DecimalInput_Element Value="decimal.Parse(column.Value.ToString()!)" ValueLookup="@(ValueLookup != null ? decimal.Parse(ValueLookup.Columns[index]!.Value.ToString()) : null)" ValueChanged="((decimal value) => column.Value = value)" Label="@column.Name" />
            }
            else if (column.Type == typeof(string))
            {
                <TextInput_Element Value="@column.Value.ToString()" ValueLookup="@(ValueLookup != null ? ValueLookup.Columns[index].Value.ToString() : null)" ValueChanged="@((string value) => column.Value = value ?? "")" Label="@column.Name" />
            }
        </MudItem>
    }

</MudGrid>

@code {
    [Parameter]
    public string Db2Name { get; set; }

    async void NextIdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IdButton_Dialog.GetNextIdAsync_Func), GetNextIdAsync);
        var result = await DialogService.Show<IdButton_Dialog>(null, parameters).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var id = (int)result.Data;
            if (id > 0)
            {
                Value.SetColumnValue("id", id);
                this.StateHasChanged();
            }
        }
    }

    async Task<int> GetNextIdAsync()
    {
        return await Service.GetNextIdAsync(Db2Name);
    }
}
