@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Extensions;
@using HotfixMods.Infrastructure.Razor.Components.Elements

@inherits HotfixPageTabBase<DbRow>
@inject GenericHotfixService Service
@inject IDialogService DialogService

@for (int i = 0; i <= AmountOfPages; i++)
{
    int slide = i;
    <MudCarouselItem Transition="TransitionHandler.Transition" CustomTransitionEnter="@TransitionHandler.EnterTransition" CustomTransitionExit="@TransitionHandler.ExitTransition">
        <MudGrid>
            @for (int j = 24 * slide; j < (slide * 24) + 24; j++)
            {
                if (Value.Columns.Count == j)
                {
                    break;
                }
                var column = Value.Columns[j];
                int index = j;

                <MudItem xs="3">
                    @if (column.Name.Equals("id", StringComparison.InvariantCultureIgnoreCase))
                    {
                        <Input_Element T="int" Value="(int)column.Value" ValueChanged="((int value) => column.Value = value)" Label="@column.Name" OnIdAdornmentClick="NextIdAsync_Click" />
                    }
                    else if (column.Type == typeof(int))
                    {
                        <Input_Element T="int" Value="(int)column.Value" ValueCompare="@(ValueCompare != null ? (int?)ValueCompare.Columns[index].Value : null)" ValueChanged="((int value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(uint))
                    {
                        <Input_Element T="uint" Value="(uint)column.Value" ValueCompare="@(ValueCompare != null ? (uint?)ValueCompare.Columns[index].Value : null)" ValueChanged="((uint value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(long))
                    {
                        <Input_Element T="long" Value="(long)column.Value" ValueCompare="@(ValueCompare != null ? (long?)ValueCompare.Columns[index].Value : null)" ValueChanged="((long value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(ulong))
                    {
                        <Input_Element T="ulong" Value="(ulong)column.Value" ValueCompare="@(ValueCompare != null ? (ulong?)ValueCompare.Columns[index].Value : null)" ValueChanged="((ulong value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(sbyte))
                    {
                        <Input_Element T="sbyte" Value="(sbyte)column.Value" ValueCompare="@(ValueCompare != null ? (sbyte?)ValueCompare.Columns[index].Value : null)" ValueChanged="((sbyte value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(byte))
                    {
                        <Input_Element T="byte" Value="(byte)column.Value" ValueCompare="@(ValueCompare != null ? (byte?)ValueCompare.Columns[index].Value : null)" ValueChanged="((byte value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(short))
                    {
                        <Input_Element T="short" Value="(short)column.Value" ValueCompare="@(ValueCompare != null ? (short?)ValueCompare.Columns[index].Value : null)" ValueChanged="((short value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(ushort))
                    {
                        <Input_Element T="ushort" Value="(ushort)column.Value" ValueCompare="@(ValueCompare != null ? (ushort?)ValueCompare.Columns[index].Value : null)" ValueChanged="((ushort value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(decimal))
                    {
                        <Input_Element Value="decimal.Parse(column.Value.ToString()!)" ValueCompare="@(ValueCompare != null ? decimal.Parse(ValueCompare.Columns[index]!.Value.ToString()) : null)" ValueChanged="((decimal value) => column.Value = value)" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                    else if (column.Type == typeof(string))
                    {
                        <Input_Element Value="@column.Value.ToString()" ValueCompare="@(ValueCompare != null ? ValueCompare.Columns[index].Value.ToString() : null)" ValueChanged="@((string value) => column.Value = value ?? "")" Label="@column.Name" OnInfoAdornmentClick="AddInfoIfExists(column.Name)" />
                    }
                </MudItem>
            }
        </MudGrid>
    </MudCarouselItem>
}

@code {
    [Parameter]
    public string Db2Name { get; set; }

    [Parameter]
    public int AmountOfPages { get; set; } = 0;

    async void NextIdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IdButton_Dialog.GetNextIdAsync_Func), GetNextIdAsync);
        var result = await DialogService.Show<IdButton_Dialog>(null, parameters).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var id = (int)result.Data;
            if (id > 0)
            {
                Value.SetColumnValue("id", id);
                this.StateHasChanged();
            }
        }
    }

    async Task<int> GetNextIdAsync()
    {
        return await Service.GetNextIdAsync(Db2Name);
    }

    EventCallback AddInfoIfExists(string name)
    {
        var classAndAssembly = $"HotfixMods.Infrastructure.InfoModels.{Db2Name}Info, HotfixMods.Infrastructure";
        var type = Type.GetType(classAndAssembly, false, true);
        if (type != null)
        {
            var value = type.GetField(name)?.GetValue(null)?.ToString();
            if (!string.IsNullOrWhiteSpace(value) && value != "TODO")
                return OpenInfoDialog(value.ToString()!);
        }
        return default;
    }
}
