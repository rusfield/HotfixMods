@using Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.SoundKitTabs

@inject SoundKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<SoundKitSearch_Dialog>" Title="Sound Kits">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Sound Kits" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<SoundKitSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="HotfixMods" Line2="Entity" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody>
                        <SoundKitEntity_Tab Value="((SoundKitDto)PageTab.Dto).Entity" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Sound" Line2="Kit" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody>
                        <SoundKit_Tab Value="((SoundKitDto)PageTab.Dto).SoundKit" ValueCompare="((SoundKitDto?)PageTab.DtoCompare)?.SoundKit" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Sound" Line2="Kit" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody AmountOfPages="((SoundKitDto?)PageTab.Dto).SoundKitEntries.Count" AddInstance_EventCallback="AddEntry_Click" RemoveInstance_EventCallback="RemoveEntry_Click" @bind-CurrentInstance="currentEntryInstance">
                        @if (((SoundKitDto?)PageTab.Dto).SoundKitEntries.Any())
                        {
                            foreach ((var entry, int index) in ((SoundKitDto?)PageTab.Dto).SoundKitEntries.WithIndex())
                            {
                                <SoundKitEntry_Tab Value="entry" ValueCompare="@(PageTab.DtoCompare != null && ((SoundKitDto?)PageTab.DtoCompare)?.SoundKitEntries.Count > index ? ((SoundKitDto?)PageTab.DtoCompare)?.SoundKitEntries[index] : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentEntryInstance = 1;

    void AddEntry_Click()
    {
        if (PageTab.Dto != null)
        {
            ((SoundKitDto)PageTab.Dto).SoundKitEntries.Add(new());
            currentEntryInstance = ((SoundKitDto)PageTab.Dto).SoundKitEntries.Count;
            this.StateHasChanged();
        }
    }

    void RemoveEntry_Click(int page)
    {
        if (PageTab.Dto != null && ((SoundKitDto)PageTab.Dto).SoundKitEntries.Count >= page)
            ((SoundKitDto)PageTab.Dto).SoundKitEntries.RemoveAt(page - 1);
        else
            return;

        if (currentEntryInstance == page)
        {
            if (!((SoundKitDto?)PageTab.Dto).SoundKitEntries.Any())
                currentEntryInstance = 0;
            else
                currentEntryInstance = Math.Max(1, page - 1);
        }
    }
}