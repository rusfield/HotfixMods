@using HotfixMods.Infrastructure.Razor.Pages.SpellVisualKitTabs
@using HotfixMods.Core.Enums.Db2;

@inject SpellVisualKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<SpellVisualKitSearch_Dialog>" Title="Spell Visual Kits">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Spell Visual Kits" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<SpellVisualKitSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="HotfixMods" Line2="Entity" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellVisualKitEntity_Tab Value="((SpellVisualKitDto)PageTab.Dto).Entity" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Visual Kit" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellVisualKit_Tab Value="((SpellVisualKitDto)PageTab.Dto).SpellVisualKit" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell Visual" Line2="Kit Effect" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                        @if (((SpellVisualKitDto?)PageTab.Dto).EffectGroups.Any())
                        {
                            foreach ((var effect, int index) in ((SpellVisualKitDto?)PageTab.Dto).EffectGroups.WithIndex())
                            {
                                <SpellVisualKitEffect_Tab EffectDisabled="effectInputDisabled" EffectTypeChanged="CurrentEffectTypeChanged" Value="effect.SpellVisualKitEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > index ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[index].SpellVisualKitEffect : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Item Effects yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            @if (((SpellVisualKitDto?)PageTab.Dto).EffectGroups.Any())
            {
                bool displaySpellVisualEffectName = false;

                switch (currentEffectType)
                {
                    case SpellVisualEffectEffectType.SPELL_PROCEDURAL_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Spell Procedural" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <SpellProceduralEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellProceduralEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellProceduralEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.SPELL_VISUAL_KIT_MODEL_ATTACH:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Spell Visual Kit" Line2="Model Attach" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <SpellVisualKitModelAttach_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellVisualKitModelAttach" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellVisualKitModelAttach : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            displaySpellVisualEffectName = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.CAMERA_EFFECT:
                        {
                            @* TODO? *@
                            effectInputDisabled = false;
                            break;
                        }
                    case SpellVisualEffectEffectType.CAMERA_EFFECT_2:
                        {
                            @* TODO? *@
                            effectInputDisabled = false;
                            break;
                        }
                    case SpellVisualEffectEffectType.SOUND_KIT:
                        {
                            @* Use ID of existing Sound Kit*@
                            effectInputDisabled = false;
                            break;
                        }
                    case SpellVisualEffectEffectType.SPELL_VISUAL_ANIM:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Spell" Line2="Visual Anim" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <SpellVisualAnim_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellVisualAnim" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellVisualAnim : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                                                        effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.SHADOWY_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Shadowy" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <ShadowyEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].ShadowyEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].ShadowyEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.SPELL_EFFECT_EMISSION:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Spell Effect" Line2="Emission" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <SpellEffectEmission_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellEffectEmission" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellEffectEmission : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            break;
                        }
                    case SpellVisualEffectEffectType.OUTLINE_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Outline" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <OutlineEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].OutlineEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].OutlineEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.UNIT_SOUND_TYPE:
                        {
                            @* No table for this type *@
                            effectInputDisabled = false;
                            break;
                        }
                    case SpellVisualEffectEffectType.DISSOLVE_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Dissolve" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance" @bind-CurrentPage="currentDissolveEffectPage" AmountOfPages="2">
                                        <DissolveEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].DissolveEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].DissolveEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            break;
                        }
                    case SpellVisualEffectEffectType.EDGE_GLOW_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Edge Glow" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <EdgeGlowEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].EdgeGlowEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].EdgeGlowEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.BEAM_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Beam" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <BeamEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].BeamEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].BeamEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.CLIENT_SCENE_EFFECT:
                        {
                            @* Use existing IDs for this (for now) *@
                            effectInputDisabled = false;
                            break;
                        }
                    case SpellVisualEffectEffectType.CLONE_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Clone" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <CloneEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].CloneEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].CloneEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.GRADIENT_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Gradient" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <GradientEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].GradientEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].GradientEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.BARRAGE_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Barrage" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <BarrageEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].BarrageEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].BarrageEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            displaySpellVisualEffectName = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.ROPE_EFFECT:
                        {
                            <MudTabPanel Class="custom-mud-tabs">
                                <TabContent>
                                    <TabTitle_Element Line1="Rope" Line2="Effect" />
                                </TabContent>
                                <ChildContent>
                                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                        <RopeEffect_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].RopeEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].RopeEffect : null)" />
                                    </TabContentEditBody>
                                </ChildContent>
                            </MudTabPanel>
                            effectInputDisabled = true;
                            break;
                        }
                    case SpellVisualEffectEffectType.SPELL_VISUAL_SCREEN_EFFECT:
                        {
                            @* Use existing IDs for this (for now) *@
                            effectInputDisabled = false;
                            break;
                        }
                }
                if (displaySpellVisualEffectName)
                {
                    <MudTabPanel Class="custom-mud-tabs">
                        <TabContent>
                            <TabTitle_Element Line1="Spell Visual" Line2="Effect Name" />
                        </TabContent>
                        <ChildContent>
                            <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                                <SpellVisualEffectName_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellVisualEffectName" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellVisualEffectName : null)" />
                            </TabContentEditBody>
                        </ChildContent>
                    </MudTabPanel>
                }
            }

        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentEffectInstance = 1;
    int currentDissolveEffectPage = 1;
    SpellVisualEffectEffectType? currentEffectType = null;
    bool effectInputDisabled = false;


    void CurrentInstanceChanged(int newCurrentInstance)
    {
        currentEffectInstance = newCurrentInstance;
        int newCurrentEffectType = ((SpellVisualKitDto?)PageTab.Dto).EffectGroups[newCurrentInstance - 1].SpellVisualKitEffect.EffectType;
        SetCurrentEffectType(newCurrentEffectType);
    }

    void CurrentEffectTypeChanged(int newCurrentEffectType)
    {
        SetCurrentEffectType(newCurrentEffectType);
    }

    void SetCurrentEffectType(int newCurrentEffectType)
    {
        if (Enum.IsDefined(typeof(SpellVisualEffectEffectType), newCurrentEffectType))
        {
            currentEffectType = (SpellVisualEffectEffectType)newCurrentEffectType;
        }
        else
        {
            currentEffectType = null;
        }
        this.StateHasChanged();
    }
}