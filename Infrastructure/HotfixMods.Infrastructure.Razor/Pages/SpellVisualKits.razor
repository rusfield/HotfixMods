@using HotfixMods.Infrastructure.Razor.Pages.SpellVisualKitTabs
@using HotfixMods.Core.Enums.Db2;

@inject SpellVisualKitService Service
@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click<SpellVisualKitSearch_Dialog>" Title="Spell Visual Kits">
    </TabContentView>
}
else
{
    <TabContentEditHeader IsUpdate="false" Title="Spell Visual Kits" ValueCompare_Callback="@(async () => ValueCompareAsync_Click<SpellVisualKitSearch_Dialog>())">
        <ChildContent>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="HotfixMods" Line2="Entity" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellVisualKitEntity_Tab Value="((SpellVisualKitDto)PageTab.Dto).Entity" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell" Line2="Visual Kit" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="object">
                        <SpellVisualKit_Tab Value="((SpellVisualKitDto)PageTab.Dto).SpellVisualKit" />
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Class="custom-mud-tabs">
                <TabContent>
                    <TabTitle_Element Line1="Spell Visual" Line2="Kit Effect" />
                </TabContent>
                <ChildContent>
                    <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                        @if (((SpellVisualKitDto?)PageTab.Dto).EffectGroups.Any())
                        {
                            foreach ((var effect, int index) in ((SpellVisualKitDto?)PageTab.Dto).EffectGroups.WithIndex())
                            {
                                <SpellVisualKitEffect_Tab EffectTypeChanged="CurrentEffectTypeChanged" Value="effect.SpellVisualKitEffect" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > index ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[index].SpellVisualKitEffect : null)" />
                            }
                        }
                        else
                        {
                            <TabContentNoData Text="There are no Item Effects yet." />
                        }
                    </TabContentEditBody>
                </ChildContent>
            </MudTabPanel>
            @if (((SpellVisualKitDto?)PageTab.Dto).EffectGroups.Any() && (currentEffectType == SpellVisualEffectEffectType.SPELL_VISUAL_KIT_MODEL_ATTACH || currentEffectType == SpellVisualEffectEffectType.BARRAGE_EFFECT))
            {
                <MudTabPanel Class="custom-mud-tabs">
                    <TabContent>
                        <TabTitle_Element Line1="Spell Visual" Line2="Effect Name" />
                    </TabContent>
                    <ChildContent>
                        <TabContentEditBody T="SpellVisualKitDto.EffectGroup" Instances="((SpellVisualKitDto?)PageTab.Dto).EffectGroups" CurrentInstanceChanged="CurrentInstanceChanged" CurrentInstance="currentEffectInstance">
                            <SpellVisualEffectName_Tab Value="((SpellVisualKitDto)PageTab.Dto).EffectGroups[currentEffectInstance - 1].SpellVisualEffectName" ValueCompare="@(PageTab.DtoCompare != null && ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups.Count > currentEffectInstance ? ((SpellVisualKitDto?)PageTab.DtoCompare)?.EffectGroups[currentEffectInstance - 1].SpellVisualEffectName : null)" />
                        </TabContentEditBody>
                    </ChildContent>
                </MudTabPanel>
            }
        </ChildContent>
    </TabContentEditHeader>
}

@code {
    int currentEffectInstance = 1;
    SpellVisualEffectEffectType? currentEffectType = null;


    void CurrentInstanceChanged(int newCurrentInstance)
    {
        currentEffectInstance = newCurrentInstance;
        int newCurrentEffectType = ((SpellVisualKitDto?)PageTab.Dto).EffectGroups[newCurrentInstance - 1].SpellVisualKitEffect.EffectType;
        SetCurrentEffectType(newCurrentEffectType);
    }

    void CurrentEffectTypeChanged(int newCurrentEffectType)
    {
        SetCurrentEffectType(newCurrentEffectType);
    }

    void SetCurrentEffectType(int newCurrentEffectType)
    {
        if (Enum.IsDefined(typeof(SpellVisualEffectEffectType), newCurrentEffectType))
        {
            currentEffectType = (SpellVisualEffectEffectType)newCurrentEffectType;
        }
        else
        {
            currentEffectType = null;
        }
        this.StateHasChanged();
    }
}