@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.GenericHotfix

@inject IDialogService DialogService
@inject GenericHotfixService Service

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click" />
}
else
{
    <TabContentEditHeader Id="@((int)idColumn.Value)" IsUpdate="false" Pages="@((int)Math.Ceiling(((DbRow)PageTab.Dto).Columns.Count / 24.0))" ValueLookup_Callback="ValueLookupAsync_Click" NextId_Callback="NextIdAsync_Click" IdChanged="IdChanged">
        <ChildContent>
            <MudTabPanel Text="@PageTab.TabName">
                <TabContentEditBody>
                    <DbRow_Tab Value="(DbRow)PageTab.Dto" ValueLookup="(DbRow)PageTab.DtoLookup" />
                </TabContentEditBody>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}


@code {
    [Parameter]
    public PageTab PageTab { get; set; }

    DbColumn idColumn;

    void IdChanged(int id)
    {
        idColumn.Value = id;
    }

    async void NewAsync_Click()
    {
        var result = await DialogService.Show<GenericHotfixSearch_Dialog>().Result;
        if (!result.Cancelled && result.Data != null)
        {
            PageTab.Dto = result.Data;
            PageTab.TabName = ((DbRow)result.Data).DbName;
            idColumn = ((DbRow)(PageTab.Dto)).Columns.First(c => c.Name.Equals("id", StringComparison.InvariantCultureIgnoreCase));
            this.StateHasChanged();
        }
    }

    async void ValueLookupAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add("Db2Name", PageTab.TabName);
        var result = await DialogService.Show<GenericHotfixSearch_Dialog>(null, parameters).Result;
        if (!result.Cancelled && result.Data != null)
        {
            PageTab.DtoLookup = result.Data;
            this.StateHasChanged();
        }
    }

    async void NextIdAsync_Click()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", idColumn.Value);
        parameters.Add("IsUpdate", true);
        parameters.Add("GetNextIdAsync", Service.GetNextIdAsync);
        parameters.Add("TableName", ((DbRow)PageTab.Dto).DbName.ToTableName());
        var result = await DialogService.Show<IdButton_Dialog>(null, parameters).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var id = (int)result.Data;
            if (id > 0)
            {
                idColumn.Value = id;
                this.StateHasChanged();
            }
        }
    }
}