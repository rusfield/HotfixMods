@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.GenericHotfixTabs

@inject IDialogService DialogService
@inject GenericHotfixService Service

@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click" Title="Generic Hotfixes" />
}
else
{
    <TabContentEditHeader Id="@(PageTab.MasterId)" Title="Generic Hotfixes" IsUpdate="false" Pages="@((int)Math.Ceiling(((DbRow)PageTab.Dto).Columns.Count / 24.0))" ValueLookup_Callback="@(async () => ValueLookupAsync_Click<GenericHotfixSearch_Dialog>())" NextId_Callback="@(async () => NextIdAsync_Click<GenericHotfixSearch_Dialog, DbRow>(Service.GetNextIdAsync))" IdChanged="IdChanged" CurrentPageChanged="CurrentPageChanged">
        <ChildContent>
            <MudTabPanel Text="@PageTab.TabName">
                <TabContentEditBody>
                    <DbRow_Tab CurrentPageIndex="currentPageIndex" Value="(DbRow)PageTab.Dto" ValueLookup="(DbRow)PageTab.DtoLookup" />
                </TabContentEditBody>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}


@code {

    int currentPageIndex;

    void IdChanged(int id)
    {
        PageTab.MasterId = id;
    }

    void CurrentPageChanged(int page)
    {
        currentPageIndex = page - 1;
    }

    new async void NewAsync_Click()
    {
        var result = await DialogService.Show<GenericHotfixSearch_Dialog>().Result;
        if (!result.Cancelled && result.Data != null)
        {
            PageTab.Dto = result.Data;
            PageTab.TabName = ((DbRow)result.Data).DbName;
            PageTab.MasterId = (int)((DbRow)(PageTab.Dto)).Columns.First(c => c.Name.Equals("id", StringComparison.InvariantCultureIgnoreCase)).Value;
            this.StateHasChanged();
        }
    }
}