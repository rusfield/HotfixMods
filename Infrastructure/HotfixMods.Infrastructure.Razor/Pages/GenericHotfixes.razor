@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Extensions
@using HotfixMods.Infrastructure.Razor.Pages.GenericHotfixTabs

@inject IDialogService DialogService
@inject GenericHotfixService Service

@inherits HotfixPageBase

@if (null == PageTab.Dto)
{
    <TabContentView Data="new List<DashboardModel>()" New_Callback="NewAsync_Click" Title="Generic Hotfixes" />
}
else
{
    <TabContentEditHeader Title="Generic Hotfixes" IsUpdate="false" ValueCompare_Callback="@(ValueCompareAsync)" Pages="@((int)Math.Ceiling(((DbRow)PageTab.Dto).Columns.Count / 24.0))">
        <ChildContent>
            <MudTabPanel Text="@PageTab.TabName">
                <TabContentEditBody>
                    <DbRow_Tab CurrentPageIndex="currentPageIndex" Value="(DbRow)PageTab.Dto" ValueCompare="(DbRow)PageTab.DtoCompare" Db2Name="@db2Name" />
                </TabContentEditBody>
            </MudTabPanel>
        </ChildContent>
    </TabContentEditHeader>
}


@code {

    int currentPageIndex;
    string db2Name;

    void CurrentPageChanged(int page)
    {
        currentPageIndex = page - 1;
    }

    new async void NewAsync_Click()
    {
        var result = await DialogService.Show<GenericHotfixSearch_Dialog>().Result;
        if (!result.Cancelled && result.Data != null)
        {
            PageTab.Dto = result.Data;
            db2Name = ((DbRow)result.Data).Db2Name;
            PageTab.TabName = db2Name;
            this.StateHasChanged();
        }
    }

    void ValueCompareAsync()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(GenericHotfixSearch_Dialog.Db2Name), db2Name);
        ValueCompareAsync_Click<GenericHotfixSearch_Dialog>(parameters);
    }
}