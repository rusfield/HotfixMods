@using HotfixMods.Infrastructure.Razor.Extensions
@using HotfixMods.Infrastructure.Razor.Components.Private

@inject GenericHotfixService Service

<DialogSearch @ref="dialogSearchRef" MudDialogInstance="Dialog">
        @if (string.IsNullOrWhiteSpace(Db2Name))
        {
            <MudText Typo="Typo.h6" Align="Align.Center">Search DB2:</MudText>
            <TextInput_Element Label="DB2" @bind-Value="_db2Name" Options="options" />
        }
        <IntInput_Element T="int?" @bind-Value="_id" Label="ID" />

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GetById_Click" Disabled="@(string.IsNullOrWhiteSpace(_db2Name) || null == _id)">Search</MudButton>
</DialogSearch>


@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public string? Db2Name { get; set; }

    DialogSearch? dialogSearchRef;

    int? _id;
    string? _db2Name;
    Dictionary<string, string> options = new();

    protected override async Task OnInitializedAsync()
    {
        _db2Name = Db2Name;
        var definitionNames = await Service.GetDefinitionNamesAsync();
        options = definitionNames.ListToOptions<string>();
        await base.OnInitializedAsync();
    }

    async void GetById_Click()
    {
        if (!string.IsNullOrWhiteSpace(_db2Name) && _id != null)
        {
            dialogSearchRef?.SetLoaderProgress("test", "test", 15);
            var data = await Service.GetByIdAsync(_db2Name, (int)_id);
            if (data != null)
            {
                Dialog.Close(data);
            }
            else
            {
                dialogSearchRef?.CancelLoaderWithMessage("No DB2 record found.");
            }
        }
    }
}
