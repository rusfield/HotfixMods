@using HotfixMods.Infrastructure.Razor.Extensions
@using HotfixMods.Infrastructure.Razor.Components.Private

@inject GenericHotfixService Service

<DialogSearch @ref="dialogSearchRef" MudDialogInstance="Dialog">
    <MudText Typo="Typo.h6" Align="Align.Center">Search DB2:</MudText>
    @if (options != null)
    {
        @if (string.IsNullOrWhiteSpace(Db2Name))
        {
            <Input_Element @ref="Db2NameRef" Label="DB2" @bind-Value="_db2Name" Options="options!" />
        }
        <Input_Element @ref="IdRef" @bind-Value="Id" Label="ID" OnSearchAdornmentClick="GetByIdAsync" />
    }
    else
    {
        <Placeholder_Element Visible="true" Amount="2" />
    }
</DialogSearch>



@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public string? Db2Name { get; set; }

    [Parameter]
    public int? Id { get; set; }

    DialogSearch? dialogSearchRef;
    Input_Element<string?>? Db2NameRef;
    Input_Element<int?>? IdRef;
    string? _db2Name;

    Dictionary<string, string>? options = null;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _db2Name = Db2Name;
            if (Id != null && _db2Name != null)
            {
                await GetByIdAsync();

                // Above function will return data if found. If not, cancel.
                Dialog.Cancel();
            }

            if (string.IsNullOrWhiteSpace(Db2Name))
            {
                var definitionNames = await Service.GetDefinitionNamesAsync();
                options = definitionNames.ListToOptions<string>();
            }
            else
            {
                options = new();
            }
            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetByIdAsync()
    {
        if (string.IsNullOrWhiteSpace(_db2Name))
        {
            Db2NameRef?.SetError(true);
        }

        if (null == Id)
        {
            IdRef?.SetError(true);
        }

        if (!string.IsNullOrWhiteSpace(_db2Name) && Id != null)
        {
            if (!await Service.Db2Exists(_db2Name))
            {
                dialogSearchRef?.CancelLoaderWithMessage("DB2 is not loaded.");
            }
            else
            {
                dialogSearchRef?.SetLoaderProgress("test", "test", 15);
                var data = await Service.GetByIdAsync(_db2Name, (int)Id);
                if (data != null)
                {
                    Dialog.Close(data);
                }
                else
                {
                    dialogSearchRef?.CancelLoaderWithMessage("No DB2 record found.");
                }
            }
        }
    }
}
