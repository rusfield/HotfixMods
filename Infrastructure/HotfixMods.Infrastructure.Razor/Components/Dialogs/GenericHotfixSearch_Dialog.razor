@inject GenericHotfixService Service

<DialogSearch @ref="dialogSearchRef" MudDialogInstance="Dialog">
    <MudText Typo="Typo.h6" Align="Align.Center">Search DB2:</MudText>
    @if (string.IsNullOrWhiteSpace(Db2Name))
    {
        <MudAutocomplete T="string" Label="DB2" @bind-Value="_db2Name" SearchFunc="@Db2Name_Autocomplete" Variant="Variant.Outlined" Adornment="Adornment.None" MaxItems="null" ShowProgressIndicator="true" />
    }
    <MudNumericField @bind-Value="@_id" Variant="Variant.Outlined" HideSpinButtons="true" Label="ID" />
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GetById_Click">Search</MudButton>
</DialogSearch>


@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public string? Db2Name { get; set; }

    DialogSearch? dialogSearchRef;

    int? _id;
    string? _db2Name;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _db2Name = Db2Name;

    }

    async void GetById_Click()
    {
        if (!string.IsNullOrWhiteSpace(_db2Name) && _id != null)
        {
            dialogSearchRef?.SetProgress("test", "test", 15);
            var data = await Service.GetByIdAsync(_db2Name, (int)_id);
            if (data != null)
            {
                Dialog.Close(data);
            }
            else
            {
                dialogSearchRef?.SetProgressDoneWithMessage("No DB2 record found.");
            }
        }
    }

    async Task<IEnumerable<string>> Db2Name_Autocomplete(string value)
    {
        var db2Names = await Service.GetDefinitionNamesAsync();

        if (string.IsNullOrEmpty(value))
            return db2Names;
        var filtered = db2Names.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        if (filtered.Count() == 1)
            _db2Name = filtered.First();
        return filtered;
    }
}
