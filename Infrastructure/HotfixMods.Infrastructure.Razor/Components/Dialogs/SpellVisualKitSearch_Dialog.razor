@using HotfixMods.Infrastructure.Services
@using HotfixMods.Infrastructure.DtoModels

@inject ISnackbar Snackbar
@inject SpellVisualKitService Service

<MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Overlap="true" OnClick="(() => Dialog.Cancel())" Style="cursor:pointer">
    <MudDialog>
        <DialogContent>
            <Loader @ref="loaderRef" />
            @if (!loaderRef.IsLoading)
            {
                <MudStack Style="max-height: 600px; overflow-y: scroll">

                    <MudText Typo="Typo.h6" Align="Align.Center">Search by ID:</MudText>
                    <MudNumericField @bind-Value="@Id" Variant="Variant.Outlined" HideSpinButtons="true" Label="Spell Visual Kit ID" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" OnAdornmentClick="Id_Click" />
                    <MudSpacer />
                    <MudSpacer />

                    @if (ShowNewOption)
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center">Start from scratch:</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="New_Click">New</MudButton>
                        <MudSpacer />
                        <MudSpacer />
                    }

                </MudStack>
            }
        </DialogContent>

    </MudDialog>
</MudBadge>

@code
{
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public bool ShowNewOption { get; set; } = true;

    Loader loaderRef = new Loader();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && null != Id)
            await SearchById();

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Id_Click()
    {
        if (null != Id)
        {
            await SearchById();
        }
        else
        {
            Snackbar.Add($"Enter a valid ID", Severity.Info);
        }
    }


    async Task SearchById()
    {
        var result = await Service.GetByIdAsync((int)Id, loaderRef.SetLoading);
        if (null != result)
        {
            Return(result);
        }
        else
        {
            Snackbar.Add($"No results with ID {Id} found", Severity.Info);
        }
    }

    async Task New_Click()
    {
        var result = await Service.GetNewAsync();
        Return(result);
    }

    void Return(SpellVisualKitDto dto)
    {
        Dialog.Close(dto);
    }
}