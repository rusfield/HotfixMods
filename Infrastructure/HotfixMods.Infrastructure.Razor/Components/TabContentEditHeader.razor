<MudGrid Class="mb-2 px-3">
        <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ValueLookup_Callback">Lookup</MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%">
            @(Title)
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Filled" Color="Color.Success">
                @(IsUpdate ? "Update" : "Save")
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

<MudTabs @ref="mudTabsRef" Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="mx-2 rounded-0 mud-elevation-0" Class="tab-bar">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <Header>
        @if (AddClick_Callback.HasDelegate)
        {
            <MudTooltip Text="@AddTooltip">
                <MudIconButton Icon="@Icons.Filled.Add" Style="color:white" OnClick="AddClick" />
            </MudTooltip>
        }
    </Header>
</MudTabs>
<MudPaper Class="pa-2 mud-theme-primary d-flex flex-column align-center" Elevation="3">
    <MudPagination SelectedChanged="CurrentPageChanged" Size="Size.Medium" Count="@Pages" Color="Color.Info" Class="@(Pages > 1 ? null : "invisible")"/>
</MudPaper>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback ValueLookup_Callback { get; set; }

    [Parameter]
    public bool IsUpdate { get; set; }

    [Parameter]
    public EventCallback AddClick_Callback { get; set; }

    [Parameter]
    public string? AddTooltip { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    [Parameter]
    public int Pages { get; set; } = 0;

    MudTabs? mudTabsRef;
    int newPanelIndex = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        if(newPanelIndex != -1)
        {
            mudTabsRef?.ActivatePanel(newPanelIndex);
            newPanelIndex = -1;
        }
        base.OnAfterRender(firstRender);
    }

    public void SetPanelIndex(int panelIndex)
    {
        newPanelIndex = panelIndex;
        this.StateHasChanged();
    }

    async Task AddClick()
    {
        await AddClick_Callback.InvokeAsync();
        if(mudTabsRef != null)
            newPanelIndex = mudTabsRef.Panels.Count;
    }
}