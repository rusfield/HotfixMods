<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
    <MudStack Row="true">
        <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ValueLookup_Callback">Lookup</MudButton>
    </MudStack>
    <MudStack Row="true">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="NextId_Callback">
            @Id
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success">
            @(IsUpdate ? "Update" : "Save")
        </MudButton>
    </MudStack>
</MudStack>
<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="mx-2 rounded-0 mud-elevation-0">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <Header>
        @if (AddClick_Callback.HasDelegate)
        {
            <MudTooltip Text="@AddTooltip">
                <MudIconButton Icon="@Icons.Filled.Add" Style="color:white" OnClick="AddClick_Callback" />
            </MudTooltip>
        }
    </Header>
</MudTabs>
<MudPaper Class="pa-2 mud-theme-primary d-flex flex-column align-center" Elevation="3">
    <MudPagination Size="Size.Medium" Count="@Pages" Color="Color.Info" />
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback ValueLookup_Callback { get; set; }

    [Parameter]
    public EventCallback NextId_Callback { get; set; }

    [Parameter]
    public bool IsUpdate { get; set; }

    [Parameter]
    public EventCallback AddClick_Callback { get; set; }

    [Parameter]
    public string? AddTooltip { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<int> IdChanged { get; set; }

    [Parameter]
    public int Pages { get; set; } = 0;

    async Task SetValueAsync(int id)
    {
        Id = id;
        await IdChanged.InvokeAsync(id);
    }

}