@inject ISnackbar Snackbar

<MudGrid Class="mb-1 px-3">
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ValueCompare_Callback">Compare</MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%">
            @(Title)
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">
                @if (saving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    @(IsUpdate ? "Update" : "Save")
                }
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar">
    @ChildContent
</MudTabs>


@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback ValueCompare_Callback { get; set; }

    [Parameter]
    public EventCallback SaveAsync_Callback { get; set; }

    [Parameter]
    public bool IsUpdate { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    bool saving = false;

    async Task SaveAsync_Click()
    {
        saving = true;
        await SaveAsync_Callback.InvokeAsync();
        await Task.Delay(500); // UI trick to make saving more user friendly
        saving = false;
        Snackbar.Add($"Saved.", Severity.Info, config => { config.Icon = Icons.Filled.Check; });
    }
}