@inject ISnackbar Snackbar

<MudGrid Class="mb-1 px-3">
    <MudItem xs="4" />
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%">
            @(Title)
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="NewAsync_Callback">
                New
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

<MudTable Items="@data" Hover="true" Height="650px" @ref="@mudTableRef">
    <HeaderContent>
        <MudTh>@*Avatars*@</MudTh>
        <MudTh>NAME</MudTh>
        <MudTh>ID</MudTh>
        <MudTh>@*Actions*@</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Avatar">
            @if (!string.IsNullOrWhiteSpace(context.AvatarUrl))
            {
                <MudAvatar Elevation="6" Image="@context.AvatarUrl" />
            }
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Action">
            <MudStack Row="true" Justify="Justify.FlexEnd">
                <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditAsync_Click(context))" />
                <MudIconButton Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteAsync_Click(context))" />
            </MudStack>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <TabContentNoData IncludeCarousel="false" />
    </NoRecordsContent>
    <PagerContent>
        <MudPaper Class="d-flex flex-column align-center">
            <MudPagination Variant="Variant.Text" Color="Color.Info" Count="@pages" Class="@($"ma-2{(pages > 1 ? "" : " invisible")}")" SelectedChanged="PageChanged" />
        </MudPaper>
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Func<Task<List<DashboardModel>>>? GetDashboardModelsAsync_Func { get; set; }

    [Parameter]
    public EventCallback NewAsync_Callback { get; set; }

    [Parameter]
    public EventCallback<DashboardModel> EditAsync_Callback { get; set; } 

    [Parameter]
    public EventCallback<DashboardModel> DeleteAsync_Callback { get; set; }

    MudTable<DashboardModel>? mudTableRef;
    List<DashboardModel> data = new();
    int pages;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (GetDashboardModelsAsync_Func != null || mudTableRef != null)
            {
                // These should not be null in release.
            }
            data = await GetDashboardModelsAsync_Func.Invoke();
            pages = ((mudTableRef.GetFilteredItemsCount() + mudTableRef.RowsPerPage - 1) / mudTableRef.RowsPerPage);
            this.StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    void PageChanged()
    {

    }

    async void EditAsync_Click(DashboardModel model)
    {
        await EditAsync_Callback.InvokeAsync(model);
    }

    async void DeleteAsync_Click(DashboardModel model)
    {
        await DeleteAsync_Callback.InvokeAsync(model);
        data.Remove(model);
        Snackbar.Add($"{model.Name} deleted.", Severity.Info, config => { config.Icon = Icons.Filled.Check; });
        this.StateHasChanged();
    }
}