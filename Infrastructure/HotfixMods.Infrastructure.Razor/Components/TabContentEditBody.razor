<div style="@($"position:absolute; top:{(contentHeight / 2) - 60}px; left:calc(100%)")">
    <MudIconButton Icon="@Icons.Filled.NavigateNext" Color="Color.Primary" OnClick="@(async () => await NavigateSlide_EventCallback.InvokeAsync(CurrentSlide + 1))" Class="@("custom-slide-navigator" + (CurrentSlide < AmountOfSlides ? "" : " invisible"))" />
</div>
<div style="@($"position:absolute; top:{(contentHeight / 2) - 60}px;left:-120px")">
    <MudIconButton Icon="@Icons.Filled.NavigateBefore" Color="Color.Primary" OnClick="@(async () => await NavigateSlide_EventCallback.InvokeAsync(CurrentSlide - 1))" Class="@("custom-slide-navigator " + (CurrentSlide > 1 ? "" : " invisible"))" />
</div>
<MudPaper Height=@($"{contentHeight}px") Class="px-5 pb-5 pt-8 z-30 mx-3 rounded-0" Style="@GetContentStyle()">
    <MudCarousel @ref="mudCarouselRef" TData="object" ShowBullets="false" AutoCycle="false" ShowArrows="false" Style="height:100%">
        @ChildContent
    </MudCarousel>
</MudPaper>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    @if (AddPage_EventCallback.HasDelegate && RemovePage_EventCallback.HasDelegate)
    {
        <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%">
            <MudStack Row="true" Class="invisible" Spacing="0">
                <MudIconButton Icon="@Icons.Filled.AddCircleOutline" />
                <MudIconButton Icon="@Icons.Filled.RemoveCircleOutline" />
            </MudStack>
            <MudPagination Selected="CurrentPage" SelectedChanged="NavigatePage_EventCallback" Size="Size.Medium" Count="AmountOfPages" Color="Color.Info" />
            <MudStack Row="true" Spacing="0">
                <MudIconButton Icon="@Icons.Filled.RemoveCircleOutline" OnClick="@(async () => await RemovePage_EventCallback.InvokeAsync(CurrentPage))" Style="color:white;" />
                <MudIconButton Icon="@Icons.Filled.AddCircleOutline" OnClick="AddPage_EventCallback" Style="color:white;" />
            </MudStack>
        </MudStack>
    }
</MudPaper>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int AmountOfSlides { get; set; } = 1;

    [Parameter]
    public int AmountOfPages { get; set; } = 1;

    [Parameter]
    public int CurrentSlide { get; set; } = 1;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public EventCallback<int> NavigatePage_EventCallback { get; set; }

    [Parameter]
    public EventCallback<int> NavigateSlide_EventCallback { get; set; }

    [Parameter]
    public EventCallback AddPage_EventCallback { get; set; }

    [Parameter]
    public EventCallback<int> RemovePage_EventCallback { get; set; }

    int contentHeight = 650;
    MudCarousel<object>? mudCarouselRef;

    protected override void OnAfterRender(bool firstRender)
    {
        if(mudCarouselRef != null && mudCarouselRef.SelectedIndex != CurrentSlide - 1)
        {
            mudCarouselRef.MoveTo(CurrentSlide - 1);
        }
        base.OnAfterRender(firstRender);
    }

    string GetContentStyle()
    {
        // Add elevation value 2
        var elevation = "box-shadow:var(--mud-elevation-2)";

        if (CurrentSlide < AmountOfSlides)
            elevation += ",2px 0px 2px 1px var(--mud-palette-primary)";
        else
            elevation += ",0px 0px 0px 0px var(--mud-palette-primary)";

        if (CurrentSlide > 1)
            elevation += ",-2px 0px 2px 1px var(--mud-palette-primary)";
        else
            elevation += ",0px 0px 0px 0px var(--mud-palette-primary)";

        return $"background-color:var(--mud-palette-surface);{elevation};";
    }
}