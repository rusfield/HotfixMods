@typeparam T where T : new()

<div style="@($"position:absolute; top:{(contentHeight / 2) - 60}px; left:calc(100%)")">
    <MudIconButton Icon="@Icons.Filled.NavigateNext" Color="Color.Primary" OnClick="@(async () => await NavigatePageAsync(CurrentPage + 1))" Class="@("custom-slide-navigator" + (1 == type && CurrentPage < AmountOfPages ? "" : " invisible"))" />
</div>
<div style="@($"position:absolute; top:{(contentHeight / 2) - 60}px;left:-120px")">
    <MudIconButton Icon="@Icons.Filled.NavigateBefore" Color="Color.Primary" OnClick="@(async () => await NavigatePageAsync(CurrentPage - 1))" Class="@("custom-slide-navigator " + (1 == type && CurrentPage > 1 ? "" : " invisible"))" />
</div>
<MudPaper Height="@($"{contentHeight}px")" Class="mx-3 z-30 rounded-0" Style="@GetContentStyle()">
    <MudCarousel @ref="mudCarouselRef" TData="object" ShowBullets="false" AutoCycle="false" ShowArrows="false" Style="height:100%;" @bind-SelectedIndex="currentSlideIndex">
        <div class="px-5 pb-5 pt-8">
            @ChildContent
        </div>
    </MudCarousel>
</MudPaper>


<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    @if (Instances != null)
    {
        <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%">
            <MudStack Row="true" Class="invisible" Spacing="0">
                <MudIconButton Icon="@Icons.Filled.AddCircleOutline" />
                <MudIconButton Icon="@Icons.Filled.RemoveCircleOutline" />
            </MudStack>
            <MudPagination @ref="mudPaginationRef" Selected="CurrentInstance" Size="Size.Medium" Count="Instances.Count" Color="Color.Info" Class="@(Instances.Count > 0 ? "" : "invisible")" SelectedChanged="NavigateInstanceAsync" />
            <MudStack Row="true" Spacing="0">
                <MudIconButton Icon="@Icons.Filled.MoveDown" OnClick="@(async () => await MoveInstanceAsync(CurrentInstance - 1, CurrentInstance - 2))" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="@(Instances.Count == 0 || CurrentInstance == 1)" />
                <MudIconButton Icon="@Icons.Filled.RemoveCircleOutline" OnClick="@(async () => await RemoveInstanceAsync())" Style="color:var(--mud-palette-text-primary);" Disabled="Instances.Count <= 0" />
                <MudIconButton Icon="@Icons.Filled.AddCircleOutline" OnClick="@(async () => await AddInstanceAsync())" Style="color:var(--mud-palette-text-primary);" />
                <MudIconButton Icon="@Icons.Filled.MoveUp" OnClick="@(async () => await MoveInstanceAsync(CurrentInstance - 1, CurrentInstance))" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="@(Instances.Count == 0 || CurrentInstance == Instances.Count)" />
            </MudStack>
        </MudStack>
    }
</MudPaper>


@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int AmountOfPages { get; set; } = 1;


    [Parameter]
    public int CurrentPage { get; set; } = -1;

    [Parameter]
    public int CurrentInstance { get; set; } = -1;

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    [Parameter]
    public EventCallback<int> CurrentInstanceChanged { get; set; }

    [Parameter]
    public EventCallback<int> NavigatePage_EventCallback { get; set; }

    [Parameter]
    public List<T> Instances { get; set; }

    int contentHeight = 650;
    MudCarousel<object>? mudCarouselRef;
    MudPagination? mudPaginationRef;
    int currentSlideIndex = 0;
    int type = 0; // 0 is normal, 1 is Page Navigation, 2 is Instance Navigation
    bool slideLeft = true;
    bool moveInstance = false;


    protected override void OnInitialized()
    {
        if (CurrentPage > -1)
        {
            type = 1;
            currentSlideIndex = CurrentPage - 1;
        }
        else if (Instances != null)
        {
            type = 2;
            currentSlideIndex = CurrentInstance - 1;
        }
        else
        {
            type = 0;
        }

        TransitionHandler.SetToNavigateTab();
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (mudCarouselRef != null)
        {
            if (moveInstance)
            {
                moveInstance = false;
                slideLeft = currentSlideIndex < CurrentInstance - 1;
                currentSlideIndex = CurrentInstance - 1;

                if (slideLeft)
                    TransitionHandler.SetToNavigateLeftBySlide();
                else
                    TransitionHandler.SetToNavigateRightBySlide();

                await InvokeAsync(() => mudCarouselRef.MoveTo(currentSlideIndex));
            }
            else if (type == 1 && currentSlideIndex != CurrentPage - 1)
            {
                slideLeft = currentSlideIndex < CurrentPage - 1;
                currentSlideIndex = CurrentPage - 1;

                if (slideLeft)
                    TransitionHandler.SetToNavigateLeftBySlide();
                else
                    TransitionHandler.SetToNavigateRightBySlide();

                await InvokeAsync(() => mudCarouselRef.MoveTo(currentSlideIndex));
            }
            else if (type == 2 && currentSlideIndex != CurrentInstance - 1)
            {
                currentSlideIndex = CurrentInstance - 1;

                TransitionHandler.SetToNavigateInstance();
                await InvokeAsync(() => mudCarouselRef.MoveTo(currentSlideIndex));
            }
            else if (AmountOfPages == 0 && Instances == null)
            {
                TransitionHandler.SetToNavigateTab();
                await InvokeAsync(() => mudCarouselRef.MoveTo(0));
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task AddInstanceAsync()
    {
        Instances.Add(new());
        CurrentInstance = Instances.Count;
        TransitionHandler.SetToNavigateInstance();
        await InvokeAsync(() => mudPaginationRef?.NavigateTo(CurrentInstance));
    }

    async Task RemoveInstanceAsync()
    {
        if (Instances.Count >= CurrentInstance)
        {
            Instances.RemoveAt(CurrentInstance - 1);
            CurrentInstance = Math.Max(0, CurrentInstance - 1);
            TransitionHandler.SetToNavigateInstance();
            await InvokeAsync(() => mudPaginationRef?.NavigateTo(CurrentInstance));
            currentSlideIndex = -1; // to force a refresh incase index does not change
        }
    }

    async Task MoveInstanceAsync(int oldIndex, int newIndex)
    {
        if (oldIndex == newIndex) // TODO: Add index null check
            return;

        var item = Instances[oldIndex];
        Instances.RemoveAt(oldIndex);
        Instances.Insert(newIndex, item);

        moveInstance = true;
        CurrentInstance = newIndex + 1;
        await CurrentInstanceChanged.InvokeAsync(CurrentInstance);
    }

    async Task NavigatePageAsync(int page)
    {
        CurrentPage = page;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    async Task NavigateInstanceAsync(int instance)
    {
        // MudBlazor (or perhapse a misconception of the framework usage) causes the instance parameter
        // to be 2 isntead of 1 when adding the first instance on the first render. Thus, this condition.
        if (instance <= Instances.Count)
        {
            CurrentInstance = instance;
            await CurrentInstanceChanged.InvokeAsync(CurrentInstance);
        }
    }

    string GetContentStyle()
    {
        // Add elevation value 2
        var elevation = "box-shadow:var(--mud-elevation-2)";

        if (1 == type && CurrentPage < AmountOfPages)
            elevation += ",2px 0px 2px 1px var(--mud-palette-primary)";
        else
            elevation += ",0px 0px 0px 0px var(--mud-palette-primary)";

        if (1 == type && CurrentPage > 1)
            elevation += ",-2px 0px 2px 1px var(--mud-palette-primary)";
        else
            elevation += ",0px 0px 0px 0px var(--mud-palette-primary)";

        return $"background-color:var(--mud-palette-surface);{elevation};";
    }
}