<div style="position:absolute; top:265px; left:calc(100%)">
    <MudIconButton Icon="@Icons.Filled.NavigateNext" Color="Color.Primary" OnClick="@(() => Navigate(CurrentSlideIndex + 1))" Class="@("custom-slide-navigator" + (CurrentSlideIndex < slides ? "" : " invisible"))" />
</div>
<div style="position:absolute; top:265px;left:-120px">
    <MudIconButton Icon="@Icons.Filled.NavigateBefore" Color="Color.Primary" OnClick="@(() => Navigate(CurrentSlideIndex - 1))" Class="@("custom-slide-navigator " + (CurrentSlideIndex > 0 ? "" : " invisible"))" />
</div>
<MudPaper Height="650px" Elevation="2" Class="px-5 pb-5 pt-8 z-30 mx-3 rounded-0" Style="background-color:var(--mud-palette-surface);">
    <CascadingValue Value="@this">
        <MudCarousel @ref="mudCarouselRef" TData="object" ShowBullets="false" AutoCycle="false" ShowArrows="false" Style="height:100%">
            @ChildContent
        </MudCarousel>
    </CascadingValue>
</MudPaper>



@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    MudCarousel<object>? mudCarouselRef;

    public int CurrentSlideIndex { get; set; }
    int slides = 0;

    public void SetSlidesIndex(int amount)
    {
        slides = amount;
        this.StateHasChanged();
    }

    void Navigate(int index)
    {
        if (index >= 0 && index <= slides)
        {
            CurrentSlideIndex = index;
            mudCarouselRef?.MoveTo(CurrentSlideIndex);
        }
    }
}