@using HotfixMods.Infrastructure.Razor.Pages;
@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Razor.Handlers

@typeparam T where T : new()

@inject IDialogService DialogService

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    [Parameter]
    public int CurrentPageIndex { get; set; }

    protected T Value { get; set; }
    protected T ValueCompare { get; set; }

    protected override void OnInitialized()
    {
        var dtoProperty = PageTab.Dto.GetType().GetProperty(typeof(T).Name);
        Value = (T)dtoProperty.GetValue(PageTab.Dto);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (PageTab.DtoCompare != null)
        {
            var dtoCompareProperty = PageTab.DtoCompare.GetType().GetProperty(typeof(T).Name);
            ValueCompare = (T)dtoCompareProperty.GetValue(PageTab.DtoCompare);
        }
        base.OnAfterRender(firstRender);
    }

    protected EventCallback OpenInfoDialog(string infoText)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(InfoButton_Dialog.Text), infoText);
        return new EventCallbackFactory().Create(this, () => DialogService.Show<InfoButton_Dialog>(null, parameters));
    }

    protected EventCallback OpenLookupDialog(string db2Name, int id)
    {
        return new EventCallbackFactory().Create(this, async () => await LookupDialogEventCallback(db2Name, id));
    }

    async Task LookupDialogEventCallback(string db2Name, int id)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(GenericHotfixSearch_Dialog.Db2Name), db2Name);
        parameters.Add(nameof(GenericHotfixSearch_Dialog.Id), id);
        var data = await DialogService.Show<GenericHotfixSearch_Dialog>(null, parameters).Result;

        if (!data.Cancelled)
        {
            GlobalHandler.LaunchTab?.Invoke(new PageTab(db2Name, typeof(GenericHotfixes))
                {
                    Dto = (DbRow)data.Data
                });
        }
    }
}
