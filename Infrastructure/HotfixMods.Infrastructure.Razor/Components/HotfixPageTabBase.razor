@using HotfixMods.Infrastructure.Razor.Pages;
@using HotfixMods.Core.Models
@using HotfixMods.Infrastructure.Razor.Handlers

@typeparam T

@inject IDialogService DialogService

@code {
    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public T? ValueCompare { get; set; }

    [Parameter]
    public int CurrentPageIndex { get; set; }

    protected bool IsLoaded { get; set; } = false;


    protected EventCallback OpenInfoDialog(string infoText)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(InfoButton_Dialog.Text), infoText);
        return new EventCallbackFactory().Create(this, () => DialogService.Show<InfoButton_Dialog>(null, parameters));
    }

    protected EventCallback OpenLookupDialog(string db2Name, int id)
    {
        return new EventCallbackFactory().Create(this, async () => await LookupDialogEventCallback(db2Name, id));
    }

    async Task LookupDialogEventCallback(string db2Name, int id)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(GenericHotfixSearch_Dialog.Db2Name), db2Name);
        parameters.Add(nameof(GenericHotfixSearch_Dialog.Id), id);
        var data = await DialogService.Show<GenericHotfixSearch_Dialog>(null, parameters).Result;

        if (!data.Cancelled)
        {
            GlobalHandler.LaunchTab?.Invoke(new PageTab(db2Name, typeof(GenericHotfixes))
                {
                    Dto = (DbRow)data.Data
                });
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            IsLoaded = true;
        return base.OnAfterRenderAsync(firstRender);
    }
}
