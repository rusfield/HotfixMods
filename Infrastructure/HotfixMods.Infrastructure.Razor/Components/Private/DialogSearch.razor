<MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Overlap="true" OnClick="(() => MudDialogInstance.Cancel())" Style="cursor:pointer">
    <MudDialog>
        <DialogContent>
            <Loader @ref="loaderRef" />
            @if (null == loaderRef || !loaderRef.IsLoading)
            {
                <MudStack Style="max-height: 600px; overflow-y: scroll">
                    @if (GetById_Func != null)
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center">Search by ID:</MudText>
                        <MudNumericField @bind-Value="@_id" Variant="Variant.Outlined" HideSpinButtons="true" Label="ID" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" OnAdornmentClick="(async () => await GetById_Func(_id))" />
                    }

                    @ChildContent

                    @if (GetNewAsync_Func != null)
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center">Start from scratch:</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="(async () => await GetNewAsync_Func())">New</MudButton>
                    }
                </MudStack>
            }
        </DialogContent>

    </MudDialog>
</MudBadge>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public MudDialogInstance MudDialogInstance { get; set; }

    [Parameter]
    public Func<int?, Task>? GetById_Func { get; set; }

    [Parameter]
    public Func<Task>? GetNewAsync_Func { get; set; }

    int? _id;
    Loader? loaderRef;

    public void SetLoaderProgress(string progressTitle, string progressSubTitle, int progress)
    {
        loaderRef?.SetProgress(progressTitle, progressSubTitle, progress);
    }

    public void CancelLoaderWithMessage(string message, Severity severity = Severity.Info)
    {
        loaderRef?.CancelWithMessage(message, severity);
        this.StateHasChanged();
    }
}
