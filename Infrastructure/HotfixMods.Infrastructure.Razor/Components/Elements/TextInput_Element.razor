@using HotfixMods.Infrastructure.Razor.Components.Private
@using HotfixMods.Infrastructure.Razor.Business

<div class="custom-wrapper">
    <MudBadge Origin="Origin.CenterLeft" Overlap="true" Icon="@Icons.Filled.ArrowForward" Color="@Color.Info" OnClick="@(() => SetValueAsync(ValueLookup))" Visible="@(GetBadgeVisibility())" Style="width:100%;" Class="pt-4">
        @if (null == Options || !Options.Any())
        {
            <MudTextField T="string" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="@Variant" Lines="@Lines" HelperText="(string)" HelperTextOnFocus="true" />
        }
        else
        {
            <Autocomplete T="string" Label="@Label" Value="@Value" ValueChanged="SetValueAsync" Variant="@Variant" Options="@Options" />
        }
    </MudBadge>
</div>

@code
{
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public string? ValueLookup { get; set; }

    [Parameter]
    public Dictionary<string, string>? Options { get; set; }

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    bool GetBadgeVisibility()
    {
        return ValueLookup != null && Value != ValueLookup;
    }

    async Task SetValueAsync(string? newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(Value);
    }


}
