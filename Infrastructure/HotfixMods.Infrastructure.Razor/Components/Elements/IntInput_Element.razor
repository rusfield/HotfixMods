@using HotfixMods.Infrastructure.Razor.Business
@using HotfixMods.Infrastructure.Razor.Components.Private

@typeparam T

<MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Filled.ArrowBack" Color="@Color.Info" OnClick="@(() => SetValueAsync(ValueLookup))" Visible="@(GetBadgeVisibility())" Style="width:100%" Class="@("cursor-pointer")">

    @* A normal fields feels faster in the UI *@
    @if (null == Options || Options.Count == 0)
    {
        <MudNumericField T="T" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="@Variant" HideSpinButtons="true" HelperText="@(ComponentHelper.GetHelperText<T>())" HelperTextOnFocus="true" />
    }
    else
    {
        <Autocomplete_Private T="T" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="Variant" Options="Options" />
    }
</MudBadge>


@code
{

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public T? ValueLookup { get; set; }

    [Parameter]
    public Dictionary<T, string>? Options { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    bool GetBadgeVisibility()
    {
        if (Value != null && ValueLookup != null)
        {
            var valStr = Value.ToString();
            var lValStr = ValueLookup.ToString();
            if (valStr.StartsWith("-") || lValStr.StartsWith("-"))
            {
                var val = long.Parse(valStr);
                var lVal = long.Parse(lValStr);
                return val != lVal;
            }
            else
            {
                var val = ulong.Parse(valStr);
                var lVal = ulong.Parse(lValStr);
                return val != lVal;
            }
        }
        return false;
    }

    async Task SetValueAsync(T newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(Value);
    }


}
